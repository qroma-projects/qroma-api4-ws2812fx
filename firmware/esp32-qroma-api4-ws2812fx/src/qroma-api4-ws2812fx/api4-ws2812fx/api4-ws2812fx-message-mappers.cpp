#include "api4-ws2812fx-message-mappers.h"

uint32_t mapWs2812fxModeToFXMode(WS2812FXMode mode) {
  switch (mode) {
    case WS2812FXMode_WS2812FX_MODE_STATIC: return FX_MODE_STATIC;
    case WS2812FXMode_WS2812FX_MODE_BLINK: return FX_MODE_BLINK;
    case WS2812FXMode_WS2812FX_MODE_BREATH: return FX_MODE_BREATH;
    case WS2812FXMode_WS2812FX_MODE_COLOR_WIPE: return FX_MODE_COLOR_WIPE;
    case WS2812FXMode_WS2812FX_MODE_COLOR_WIPE_INV: return FX_MODE_COLOR_WIPE_INV;
    case WS2812FXMode_WS2812FX_MODE_COLOR_WIPE_REV: return FX_MODE_COLOR_WIPE_REV;
    case WS2812FXMode_WS2812FX_MODE_COLOR_WIPE_REV_INV: return FX_MODE_COLOR_WIPE_REV_INV;
    case WS2812FXMode_WS2812FX_MODE_COLOR_WIPE_RANDOM: return FX_MODE_COLOR_WIPE_RANDOM;
    case WS2812FXMode_WS2812FX_MODE_RANDOM_COLOR: return FX_MODE_RANDOM_COLOR;
    case WS2812FXMode_WS2812FX_MODE_SINGLE_DYNAMIC: return FX_MODE_SINGLE_DYNAMIC;
    case WS2812FXMode_WS2812FX_MODE_MULTI_DYNAMIC: return FX_MODE_MULTI_DYNAMIC;
    case WS2812FXMode_WS2812FX_MODE_RAINBOW: return FX_MODE_RAINBOW;
    case WS2812FXMode_WS2812FX_MODE_RAINBOW_CYCLE: return FX_MODE_RAINBOW_CYCLE;
    case WS2812FXMode_WS2812FX_MODE_SCAN: return FX_MODE_SCAN;
    case WS2812FXMode_WS2812FX_MODE_DUAL_SCAN: return FX_MODE_DUAL_SCAN;
    case WS2812FXMode_WS2812FX_MODE_FADE: return FX_MODE_FADE;
    case WS2812FXMode_WS2812FX_MODE_THEATER_CHASE: return FX_MODE_THEATER_CHASE;
    case WS2812FXMode_WS2812FX_MODE_THEATER_CHASE_RAINBOW: return FX_MODE_THEATER_CHASE_RAINBOW;
    case WS2812FXMode_WS2812FX_MODE_RUNNING_LIGHTS: return FX_MODE_RUNNING_LIGHTS;
    case WS2812FXMode_WS2812FX_MODE_TWINKLE: return FX_MODE_TWINKLE;
    case WS2812FXMode_WS2812FX_MODE_TWINKLE_FADE: return FX_MODE_TWINKLE_FADE;
    case WS2812FXMode_WS2812FX_MODE_TWINKLE_RANDOM: return FX_MODE_TWINKLE_RANDOM;
    case WS2812FXMode_WS2812FX_MODE_SPARKLE: return FX_MODE_SPARKLE;
    case WS2812FXMode_WS2812FX_MODE_FLASH_SPARKLE: return FX_MODE_FLASH_SPARKLE;
    case WS2812FXMode_WS2812FX_MODE_HYPER_SPARKLE: return FX_MODE_HYPER_SPARKLE;
    case WS2812FXMode_WS2812FX_MODE_STROBE: return FX_MODE_STROBE;
    case WS2812FXMode_WS2812FX_MODE_STROBE_RAINBOW: return FX_MODE_STROBE_RAINBOW;
    case WS2812FXMode_WS2812FX_MODE_MULTI_STROBE: return FX_MODE_MULTI_STROBE;
    case WS2812FXMode_WS2812FX_MODE_BLINK_RAINBOW: return FX_MODE_BLINK_RAINBOW;
    case WS2812FXMode_WS2812FX_MODE_CHASE_WHITE: return FX_MODE_CHASE_WHITE;
    case WS2812FXMode_WS2812FX_MODE_CHASE_COLOR: return FX_MODE_CHASE_COLOR;
    case WS2812FXMode_WS2812FX_MODE_CHASE_RANDOM: return FX_MODE_CHASE_RANDOM;
    case WS2812FXMode_WS2812FX_MODE_CHASE_RAINBOW: return FX_MODE_CHASE_RAINBOW;
    case WS2812FXMode_WS2812FX_MODE_CHASE_FLASH: return FX_MODE_CHASE_FLASH;
    case WS2812FXMode_WS2812FX_MODE_CHASE_FLASH_RANDOM: return FX_MODE_CHASE_FLASH_RANDOM;
    case WS2812FXMode_WS2812FX_MODE_CHASE_RAINBOW_WHITE: return FX_MODE_CHASE_RAINBOW_WHITE;
    case WS2812FXMode_WS2812FX_MODE_CHASE_BLACKOUT: return FX_MODE_CHASE_BLACKOUT;
    case WS2812FXMode_WS2812FX_MODE_CHASE_BLACKOUT_RAINBOW: return FX_MODE_CHASE_BLACKOUT_RAINBOW;
    case WS2812FXMode_WS2812FX_MODE_COLOR_SWEEP_RANDOM: return FX_MODE_COLOR_SWEEP_RANDOM;
    case WS2812FXMode_WS2812FX_MODE_RUNNING_COLOR: return FX_MODE_RUNNING_COLOR;
    case WS2812FXMode_WS2812FX_MODE_RUNNING_RED_BLUE: return FX_MODE_RUNNING_RED_BLUE;
    case WS2812FXMode_WS2812FX_MODE_RUNNING_RANDOM: return FX_MODE_RUNNING_RANDOM;
    case WS2812FXMode_WS2812FX_MODE_LARSON_SCANNER: return FX_MODE_LARSON_SCANNER;
    case WS2812FXMode_WS2812FX_MODE_COMET: return FX_MODE_COMET;
    case WS2812FXMode_WS2812FX_MODE_FIREWORKS: return FX_MODE_FIREWORKS;
    case WS2812FXMode_WS2812FX_MODE_FIREWORKS_RANDOM: return FX_MODE_FIREWORKS_RANDOM;
    case WS2812FXMode_WS2812FX_MODE_MERRY_CHRISTMAS: return FX_MODE_MERRY_CHRISTMAS;
    case WS2812FXMode_WS2812FX_MODE_FIRE_FLICKER: return FX_MODE_FIRE_FLICKER;
    case WS2812FXMode_WS2812FX_MODE_FIRE_FLICKER_SOFT: return FX_MODE_FIRE_FLICKER_SOFT;
    case WS2812FXMode_WS2812FX_MODE_FIRE_FLICKER_INTENSE: return FX_MODE_FIRE_FLICKER_INTENSE;
    case WS2812FXMode_WS2812FX_MODE_CIRCUS_COMBUSTUS: return FX_MODE_CIRCUS_COMBUSTUS;
    case WS2812FXMode_WS2812FX_MODE_HALLOWEEN: return FX_MODE_HALLOWEEN;
    case WS2812FXMode_WS2812FX_MODE_BICOLOR_CHASE: return FX_MODE_BICOLOR_CHASE;
    case WS2812FXMode_WS2812FX_MODE_TRICOLOR_CHASE: return FX_MODE_TRICOLOR_CHASE;
    case WS2812FXMode_WS2812FX_MODE_ICU: return FX_MODE_ICU;
    case WS2812FXMode_WS2812FX_MODE_CUSTOM_0: return FX_MODE_CUSTOM_0;
    case WS2812FXMode_WS2812FX_MODE_CUSTOM_1: return FX_MODE_CUSTOM_1;
    case WS2812FXMode_WS2812FX_MODE_CUSTOM_2: return FX_MODE_CUSTOM_2;
    case WS2812FXMode_WS2812FX_MODE_CUSTOM_3: return FX_MODE_CUSTOM_3;
    default: return FX_MODE_STATIC;
  }
}

WS2812FXMode mapFxModeToWS2812FXMode(uint32_t fxMode) {
  switch (fxMode) {
    case FX_MODE_STATIC: return WS2812FXMode_WS2812FX_MODE_STATIC;
    case FX_MODE_BLINK: return WS2812FXMode_WS2812FX_MODE_BLINK;
    case FX_MODE_BREATH: return WS2812FXMode_WS2812FX_MODE_BREATH;
    case FX_MODE_COLOR_WIPE: return WS2812FXMode_WS2812FX_MODE_COLOR_WIPE;
    case FX_MODE_COLOR_WIPE_INV: return WS2812FXMode_WS2812FX_MODE_COLOR_WIPE_INV;
    case FX_MODE_COLOR_WIPE_REV: return WS2812FXMode_WS2812FX_MODE_COLOR_WIPE_REV;
    case FX_MODE_COLOR_WIPE_REV_INV: return WS2812FXMode_WS2812FX_MODE_COLOR_WIPE_REV_INV;
    case FX_MODE_COLOR_WIPE_RANDOM: return WS2812FXMode_WS2812FX_MODE_COLOR_WIPE_RANDOM;
    case FX_MODE_RANDOM_COLOR: return WS2812FXMode_WS2812FX_MODE_RANDOM_COLOR;
    case FX_MODE_SINGLE_DYNAMIC: return WS2812FXMode_WS2812FX_MODE_SINGLE_DYNAMIC;
    case FX_MODE_MULTI_DYNAMIC: return WS2812FXMode_WS2812FX_MODE_MULTI_DYNAMIC;
    case FX_MODE_RAINBOW: return WS2812FXMode_WS2812FX_MODE_RAINBOW;
    case FX_MODE_RAINBOW_CYCLE: return WS2812FXMode_WS2812FX_MODE_RAINBOW_CYCLE;
    case FX_MODE_SCAN: return WS2812FXMode_WS2812FX_MODE_SCAN;
    case FX_MODE_DUAL_SCAN: return WS2812FXMode_WS2812FX_MODE_DUAL_SCAN;
    case FX_MODE_FADE: return WS2812FXMode_WS2812FX_MODE_FADE;
    case FX_MODE_THEATER_CHASE: return WS2812FXMode_WS2812FX_MODE_THEATER_CHASE;
    case FX_MODE_THEATER_CHASE_RAINBOW: return WS2812FXMode_WS2812FX_MODE_THEATER_CHASE_RAINBOW;
    case FX_MODE_RUNNING_LIGHTS: return WS2812FXMode_WS2812FX_MODE_RUNNING_LIGHTS;
    case FX_MODE_TWINKLE: return WS2812FXMode_WS2812FX_MODE_TWINKLE;
    case FX_MODE_TWINKLE_FADE: return WS2812FXMode_WS2812FX_MODE_TWINKLE_FADE;
    case FX_MODE_TWINKLE_RANDOM: return WS2812FXMode_WS2812FX_MODE_TWINKLE_RANDOM;
    case FX_MODE_SPARKLE: return WS2812FXMode_WS2812FX_MODE_SPARKLE;
    case FX_MODE_FLASH_SPARKLE: return WS2812FXMode_WS2812FX_MODE_FLASH_SPARKLE;
    case FX_MODE_HYPER_SPARKLE: return WS2812FXMode_WS2812FX_MODE_HYPER_SPARKLE;
    case FX_MODE_STROBE: return WS2812FXMode_WS2812FX_MODE_STROBE;
    case FX_MODE_STROBE_RAINBOW: return WS2812FXMode_WS2812FX_MODE_STROBE_RAINBOW;
    case FX_MODE_MULTI_STROBE: return WS2812FXMode_WS2812FX_MODE_MULTI_STROBE;
    case FX_MODE_BLINK_RAINBOW: return WS2812FXMode_WS2812FX_MODE_BLINK_RAINBOW;
    case FX_MODE_CHASE_WHITE: return WS2812FXMode_WS2812FX_MODE_CHASE_WHITE;
    case FX_MODE_CHASE_COLOR: return WS2812FXMode_WS2812FX_MODE_CHASE_COLOR;
    case FX_MODE_CHASE_RANDOM: return WS2812FXMode_WS2812FX_MODE_CHASE_RANDOM;
    case FX_MODE_CHASE_RAINBOW: return WS2812FXMode_WS2812FX_MODE_CHASE_RAINBOW;
    case FX_MODE_CHASE_FLASH: return WS2812FXMode_WS2812FX_MODE_CHASE_FLASH;
    case FX_MODE_CHASE_FLASH_RANDOM: return WS2812FXMode_WS2812FX_MODE_CHASE_FLASH_RANDOM;
    case FX_MODE_CHASE_RAINBOW_WHITE: return WS2812FXMode_WS2812FX_MODE_CHASE_RAINBOW_WHITE;
    case FX_MODE_CHASE_BLACKOUT: return WS2812FXMode_WS2812FX_MODE_CHASE_BLACKOUT;
    case FX_MODE_CHASE_BLACKOUT_RAINBOW: return WS2812FXMode_WS2812FX_MODE_CHASE_BLACKOUT_RAINBOW;
    case FX_MODE_COLOR_SWEEP_RANDOM: return WS2812FXMode_WS2812FX_MODE_COLOR_SWEEP_RANDOM;
    case FX_MODE_RUNNING_COLOR: return WS2812FXMode_WS2812FX_MODE_RUNNING_COLOR;
    case FX_MODE_RUNNING_RED_BLUE: return WS2812FXMode_WS2812FX_MODE_RUNNING_RED_BLUE;
    case FX_MODE_RUNNING_RANDOM: return WS2812FXMode_WS2812FX_MODE_RUNNING_RANDOM;
    case FX_MODE_LARSON_SCANNER: return WS2812FXMode_WS2812FX_MODE_LARSON_SCANNER;
    case FX_MODE_COMET: return WS2812FXMode_WS2812FX_MODE_COMET;
    case FX_MODE_FIREWORKS: return WS2812FXMode_WS2812FX_MODE_FIREWORKS;
    case FX_MODE_FIREWORKS_RANDOM: return WS2812FXMode_WS2812FX_MODE_FIREWORKS_RANDOM;
    case FX_MODE_MERRY_CHRISTMAS: return WS2812FXMode_WS2812FX_MODE_MERRY_CHRISTMAS;
    case FX_MODE_FIRE_FLICKER: return WS2812FXMode_WS2812FX_MODE_FIRE_FLICKER;
    case FX_MODE_FIRE_FLICKER_SOFT: return WS2812FXMode_WS2812FX_MODE_FIRE_FLICKER_SOFT;
    case FX_MODE_FIRE_FLICKER_INTENSE: return WS2812FXMode_WS2812FX_MODE_FIRE_FLICKER_INTENSE;
    case FX_MODE_CIRCUS_COMBUSTUS: return WS2812FXMode_WS2812FX_MODE_CIRCUS_COMBUSTUS;
    case FX_MODE_HALLOWEEN: return WS2812FXMode_WS2812FX_MODE_HALLOWEEN;
    case FX_MODE_BICOLOR_CHASE: return WS2812FXMode_WS2812FX_MODE_BICOLOR_CHASE;
    case FX_MODE_TRICOLOR_CHASE: return WS2812FXMode_WS2812FX_MODE_TRICOLOR_CHASE;
    case FX_MODE_ICU: return WS2812FXMode_WS2812FX_MODE_ICU;
    case FX_MODE_CUSTOM_0: return WS2812FXMode_WS2812FX_MODE_CUSTOM_0;
    case FX_MODE_CUSTOM_1: return WS2812FXMode_WS2812FX_MODE_CUSTOM_1;
    case FX_MODE_CUSTOM_2: return WS2812FXMode_WS2812FX_MODE_CUSTOM_2;
    case FX_MODE_CUSTOM_3: return WS2812FXMode_WS2812FX_MODE_CUSTOM_3;
    default: return WS2812FXMode_WS2812FX_MODE_STATIC;
  }
}

uint32_t mapWs2812fxColorOrderToNeoPixelType(WS2812FXColorOrder colorOrder) {
  switch (colorOrder) {
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RGB: return NEO_RGB;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RBG: return NEO_RBG;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GRB: return NEO_GRB;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GBR: return NEO_GBR;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BRG: return NEO_BRG;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BGR: return NEO_BGR;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WRGB: return NEO_WRGB;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WRBG: return NEO_WRBG;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WGRB: return NEO_WGRB;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WGBR: return NEO_WGBR;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WBRG: return NEO_WBRG;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WBGR: return NEO_WBGR;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RWGB: return NEO_RWGB;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RWBG: return NEO_RWBG;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RGWB: return NEO_RGWB;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RGBW: return NEO_RGBW;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RBWG: return NEO_RBWG;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RBGW: return NEO_RBGW;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GWRB: return NEO_GWRB;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GWBR: return NEO_GWBR;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GRWB: return NEO_GRWB;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GRBW: return NEO_GRBW;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GBWR: return NEO_GBWR;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GBRW: return NEO_GBRW;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BWRG: return NEO_BWRG;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BWGR: return NEO_BWGR;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BRWG: return NEO_BRWG;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BRGW: return NEO_BRGW;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BGWR: return NEO_BGWR;
    case WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BGRW: return NEO_BGRW;
    default: return NEO_GRB; // Default to GRB
  }
}

WS2812FXColorOrder mapNeoPixelTypeToWS2812FXColorOrder(uint32_t neoPixelType) {
  
  switch (neoPixelType) {
    case NEO_RGB: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RGB;
    case NEO_RBG: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RBG;
    case NEO_GRB: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GRB;
    case NEO_GBR: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GBR;
    case NEO_BRG: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BRG;
    case NEO_BGR: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BGR;
    case NEO_WRGB: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WRGB;
    case NEO_WRBG: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WRBG;
    case NEO_WGRB: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WGRB;
    case NEO_WGBR: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WGBR;
    case NEO_WBRG: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WBRG;
    case NEO_WBGR: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_WBGR;
    case NEO_RWGB: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RWGB;
    case NEO_RWBG: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RWBG;
    case NEO_RGWB: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RGWB;
    case NEO_RGBW: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RGBW;
    case NEO_RBWG: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RBWG;
    case NEO_RBGW: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_RBGW;
    case NEO_GWRB: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GWRB;
    case NEO_GWBR: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GWBR;
    case NEO_GRWB: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GRWB;
    case NEO_GRBW: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GRBW;
    case NEO_GBWR: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GBWR;
    case NEO_GBRW: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_GBRW;
    case NEO_BWRG: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BWRG;
    case NEO_BWGR: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BWGR;
    case NEO_BRWG: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BRWG;
    case NEO_BRGW: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BRGW;
    case NEO_BGWR: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BGWR;
    case NEO_BGRW: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_BGRW;
    default: return WS2812FXColorOrder_WS2812FX_COLOR_ORDER_NOT_SET;
  }
} 


// Helper function to convert NeoPixel transmission rate
uint32_t mapWs2812fxTxRateToNeoPixelRate(WS2812FX_NeoPixelTxRate txRate) {
  switch (txRate) {
    case WS2812FX_NeoPixelTxRate_WS2812FX_NEO_PIXEL_TX_RATE_400_KHZ: return NEO_KHZ400;
    case WS2812FX_NeoPixelTxRate_WS2812FX_NEO_PIXEL_TX_RATE_800_KHZ: return NEO_KHZ800;
    default: return NEO_KHZ800; // Default to 800KHz
  }
}
