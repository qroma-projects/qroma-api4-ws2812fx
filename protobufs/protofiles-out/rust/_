// @generated
// This file is @generated by prost-build.
// ============================================================================
// BASIC CONTROL MESSAGES
// ============================================================================

/// Initialize WS2812FX strip
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ws2812FxConstructAndInitRequest {
    /// Number of LEDs in strip
    #[prost(uint32, tag="1")]
    pub led_count: u32,
    /// GPIO pin number
    #[prost(uint32, tag="2")]
    pub pin: u32,
    /// Color order
    #[prost(enumeration="Ws2812fxColorOrder", tag="3")]
    pub neo_pixel_rgb_order: i32,
    /// NeoPixel transmission rate
    #[prost(enumeration="Ws2812fxNeoPixelTxRate", tag="4")]
    pub neo_pixel_tx_rate: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoArgRequest {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NoArgResponse {
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QromaColor {
    #[prost(uint32, tag="1")]
    pub red: u32,
    #[prost(uint32, tag="2")]
    pub green: u32,
    #[prost(uint32, tag="3")]
    pub blue: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetPixelColorRequest {
    #[prost(uint32, tag="1")]
    pub pixel_index: u32,
    #[prost(message, optional, tag="2")]
    pub color: ::core::option::Option<QromaColor>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FillRequest {
    #[prost(message, optional, tag="1")]
    pub color: ::core::option::Option<QromaColor>,
    #[prost(uint32, tag="2")]
    pub first_pixel: u32,
    #[prost(uint32, tag="3")]
    pub num_pixels: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetModeRequest {
    #[prost(enumeration="Ws2812fxMode", tag="1")]
    pub mode: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetBrightnessRequest {
    #[prost(uint32, tag="1")]
    pub brightness: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetSpeedRequest {
    #[prost(uint32, tag="1")]
    pub speed: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncreaseBrightnessRequest {
    #[prost(uint32, tag="1")]
    pub amount: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DecreaseBrightnessRequest {
    #[prost(uint32, tag="1")]
    pub amount: u32,
}
// ============================================================================
// COMMAND/RESPONSE WRAPPERS
// ============================================================================

/// Main command wrapper
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ws2812FxApiTx {
    #[prost(oneof="ws2812_fx_api_tx::Request", tags="1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18")]
    pub request: ::core::option::Option<ws2812_fx_api_tx::Request>,
}
/// Nested message and enum types in `Ws2812FxApiTx`.
pub mod ws2812_fx_api_tx {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Request {
        #[prost(message, tag="1")]
        ConstructAndInit(super::Ws2812FxConstructAndInitRequest),
        #[prost(message, tag="2")]
        Start(super::NoArgRequest),
        #[prost(message, tag="3")]
        Stop(super::NoArgRequest),
        #[prost(message, tag="4")]
        Pause(super::NoArgRequest),
        #[prost(message, tag="5")]
        Resume(super::NoArgRequest),
        #[prost(message, tag="6")]
        Service(super::NoArgRequest),
        #[prost(message, tag="7")]
        Show(super::NoArgRequest),
        #[prost(message, tag="8")]
        StripOff(super::NoArgRequest),
        #[prost(message, tag="9")]
        FadeOut(super::NoArgRequest),
        #[prost(message, tag="10")]
        FadeOutToColor(super::QromaColor),
        #[prost(message, tag="11")]
        SetMode(super::SetModeRequest),
        #[prost(message, tag="12")]
        SetColor(super::QromaColor),
        #[prost(message, tag="13")]
        SetSpeed(super::SetSpeedRequest),
        #[prost(message, tag="14")]
        Fill(super::FillRequest),
        #[prost(message, tag="15")]
        SetPixelColor(super::SetPixelColorRequest),
        #[prost(message, tag="16")]
        SetBrightness(super::SetBrightnessRequest),
        #[prost(message, tag="17")]
        IncreaseBrightness(super::IncreaseBrightnessRequest),
        #[prost(message, tag="18")]
        DecreaseBrightness(super::DecreaseBrightnessRequest),
    }
}
/// Main response wrapper
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ws2812FxApiRx {
    #[prost(oneof="ws2812_fx_api_rx::Response", tags="1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18")]
    pub response: ::core::option::Option<ws2812_fx_api_rx::Response>,
}
/// Nested message and enum types in `Ws2812FxApiRx`.
pub mod ws2812_fx_api_rx {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag="1")]
        AckConstructAndInit(super::Ws2812FxConstructAndInitRequest),
        #[prost(message, tag="2")]
        AckStart(super::NoArgResponse),
        #[prost(message, tag="3")]
        AckStop(super::NoArgResponse),
        #[prost(message, tag="4")]
        AckPause(super::NoArgResponse),
        #[prost(message, tag="5")]
        AckResume(super::NoArgResponse),
        #[prost(message, tag="6")]
        AckService(super::NoArgResponse),
        #[prost(message, tag="7")]
        AckShow(super::NoArgResponse),
        #[prost(message, tag="8")]
        AckStripOff(super::NoArgResponse),
        #[prost(message, tag="9")]
        AckFadeOut(super::NoArgResponse),
        #[prost(message, tag="10")]
        AckFadeOutToColor(super::QromaColor),
        #[prost(message, tag="11")]
        AckSetMode(super::SetModeRequest),
        #[prost(message, tag="12")]
        AckSetColor(super::QromaColor),
        #[prost(message, tag="13")]
        AckSetSpeed(super::SetSpeedRequest),
        #[prost(message, tag="14")]
        AckFill(super::FillRequest),
        #[prost(message, tag="15")]
        AckSetPixelColor(super::SetPixelColorRequest),
        #[prost(message, tag="16")]
        AckSetBrightness(super::SetBrightnessRequest),
        #[prost(message, tag="17")]
        AckIncreaseBrightness(super::IncreaseBrightnessRequest),
        #[prost(message, tag="18")]
        AckDecreaseBrightness(super::DecreaseBrightnessRequest),
    }
}
// WS2812FX Protocol Buffer Messages
// Maps to the WS2812FX library API from <https://github.com/kitesurfer1404/WS2812FX>

// ============================================================================
// ENUMS
// ============================================================================

/// WS2812FX modes - maps to the FX_MODE_* constants
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ws2812fxMode {
    Static = 0,
    Blink = 1,
    Breath = 2,
    ColorWipe = 3,
    ColorWipeInv = 4,
    ColorWipeRev = 5,
    ColorWipeRevInv = 6,
    ColorWipeRandom = 7,
    RandomColor = 8,
    SingleDynamic = 9,
    MultiDynamic = 10,
    Rainbow = 11,
    RainbowCycle = 12,
    Scan = 13,
    DualScan = 14,
    Fade = 15,
    TheaterChase = 16,
    TheaterChaseRainbow = 17,
    RunningLights = 18,
    Twinkle = 19,
    TwinkleFade = 20,
    TwinkleRandom = 21,
    Sparkle = 22,
    FlashSparkle = 23,
    HyperSparkle = 24,
    Strobe = 25,
    StrobeRainbow = 26,
    MultiStrobe = 27,
    BlinkRainbow = 28,
    ChaseWhite = 29,
    ChaseColor = 30,
    ChaseRandom = 31,
    ChaseRainbow = 32,
    ChaseFlash = 33,
    ChaseFlashRandom = 34,
    ChaseRainbowWhite = 35,
    ChaseBlackout = 36,
    ChaseBlackoutRainbow = 37,
    ColorSweepRandom = 38,
    RunningColor = 39,
    RunningRedBlue = 40,
    RunningRandom = 41,
    LarsonScanner = 42,
    Comet = 43,
    Fireworks = 44,
    FireworksRandom = 45,
    MerryChristmas = 46,
    FireFlicker = 47,
    FireFlickerSoft = 48,
    FireFlickerIntense = 49,
    CircusCombustus = 50,
    Halloween = 51,
    BicolorChase = 52,
    TricolorChase = 53,
    Icu = 54,
    Custom0 = 55,
    Custom1 = 56,
    Custom2 = 57,
    Custom3 = 58,
}
impl Ws2812fxMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ws2812fxMode::Static => "WS2812FX_MODE_STATIC",
            Ws2812fxMode::Blink => "WS2812FX_MODE_BLINK",
            Ws2812fxMode::Breath => "WS2812FX_MODE_BREATH",
            Ws2812fxMode::ColorWipe => "WS2812FX_MODE_COLOR_WIPE",
            Ws2812fxMode::ColorWipeInv => "WS2812FX_MODE_COLOR_WIPE_INV",
            Ws2812fxMode::ColorWipeRev => "WS2812FX_MODE_COLOR_WIPE_REV",
            Ws2812fxMode::ColorWipeRevInv => "WS2812FX_MODE_COLOR_WIPE_REV_INV",
            Ws2812fxMode::ColorWipeRandom => "WS2812FX_MODE_COLOR_WIPE_RANDOM",
            Ws2812fxMode::RandomColor => "WS2812FX_MODE_RANDOM_COLOR",
            Ws2812fxMode::SingleDynamic => "WS2812FX_MODE_SINGLE_DYNAMIC",
            Ws2812fxMode::MultiDynamic => "WS2812FX_MODE_MULTI_DYNAMIC",
            Ws2812fxMode::Rainbow => "WS2812FX_MODE_RAINBOW",
            Ws2812fxMode::RainbowCycle => "WS2812FX_MODE_RAINBOW_CYCLE",
            Ws2812fxMode::Scan => "WS2812FX_MODE_SCAN",
            Ws2812fxMode::DualScan => "WS2812FX_MODE_DUAL_SCAN",
            Ws2812fxMode::Fade => "WS2812FX_MODE_FADE",
            Ws2812fxMode::TheaterChase => "WS2812FX_MODE_THEATER_CHASE",
            Ws2812fxMode::TheaterChaseRainbow => "WS2812FX_MODE_THEATER_CHASE_RAINBOW",
            Ws2812fxMode::RunningLights => "WS2812FX_MODE_RUNNING_LIGHTS",
            Ws2812fxMode::Twinkle => "WS2812FX_MODE_TWINKLE",
            Ws2812fxMode::TwinkleFade => "WS2812FX_MODE_TWINKLE_FADE",
            Ws2812fxMode::TwinkleRandom => "WS2812FX_MODE_TWINKLE_RANDOM",
            Ws2812fxMode::Sparkle => "WS2812FX_MODE_SPARKLE",
            Ws2812fxMode::FlashSparkle => "WS2812FX_MODE_FLASH_SPARKLE",
            Ws2812fxMode::HyperSparkle => "WS2812FX_MODE_HYPER_SPARKLE",
            Ws2812fxMode::Strobe => "WS2812FX_MODE_STROBE",
            Ws2812fxMode::StrobeRainbow => "WS2812FX_MODE_STROBE_RAINBOW",
            Ws2812fxMode::MultiStrobe => "WS2812FX_MODE_MULTI_STROBE",
            Ws2812fxMode::BlinkRainbow => "WS2812FX_MODE_BLINK_RAINBOW",
            Ws2812fxMode::ChaseWhite => "WS2812FX_MODE_CHASE_WHITE",
            Ws2812fxMode::ChaseColor => "WS2812FX_MODE_CHASE_COLOR",
            Ws2812fxMode::ChaseRandom => "WS2812FX_MODE_CHASE_RANDOM",
            Ws2812fxMode::ChaseRainbow => "WS2812FX_MODE_CHASE_RAINBOW",
            Ws2812fxMode::ChaseFlash => "WS2812FX_MODE_CHASE_FLASH",
            Ws2812fxMode::ChaseFlashRandom => "WS2812FX_MODE_CHASE_FLASH_RANDOM",
            Ws2812fxMode::ChaseRainbowWhite => "WS2812FX_MODE_CHASE_RAINBOW_WHITE",
            Ws2812fxMode::ChaseBlackout => "WS2812FX_MODE_CHASE_BLACKOUT",
            Ws2812fxMode::ChaseBlackoutRainbow => "WS2812FX_MODE_CHASE_BLACKOUT_RAINBOW",
            Ws2812fxMode::ColorSweepRandom => "WS2812FX_MODE_COLOR_SWEEP_RANDOM",
            Ws2812fxMode::RunningColor => "WS2812FX_MODE_RUNNING_COLOR",
            Ws2812fxMode::RunningRedBlue => "WS2812FX_MODE_RUNNING_RED_BLUE",
            Ws2812fxMode::RunningRandom => "WS2812FX_MODE_RUNNING_RANDOM",
            Ws2812fxMode::LarsonScanner => "WS2812FX_MODE_LARSON_SCANNER",
            Ws2812fxMode::Comet => "WS2812FX_MODE_COMET",
            Ws2812fxMode::Fireworks => "WS2812FX_MODE_FIREWORKS",
            Ws2812fxMode::FireworksRandom => "WS2812FX_MODE_FIREWORKS_RANDOM",
            Ws2812fxMode::MerryChristmas => "WS2812FX_MODE_MERRY_CHRISTMAS",
            Ws2812fxMode::FireFlicker => "WS2812FX_MODE_FIRE_FLICKER",
            Ws2812fxMode::FireFlickerSoft => "WS2812FX_MODE_FIRE_FLICKER_SOFT",
            Ws2812fxMode::FireFlickerIntense => "WS2812FX_MODE_FIRE_FLICKER_INTENSE",
            Ws2812fxMode::CircusCombustus => "WS2812FX_MODE_CIRCUS_COMBUSTUS",
            Ws2812fxMode::Halloween => "WS2812FX_MODE_HALLOWEEN",
            Ws2812fxMode::BicolorChase => "WS2812FX_MODE_BICOLOR_CHASE",
            Ws2812fxMode::TricolorChase => "WS2812FX_MODE_TRICOLOR_CHASE",
            Ws2812fxMode::Icu => "WS2812FX_MODE_ICU",
            Ws2812fxMode::Custom0 => "WS2812FX_MODE_CUSTOM_0",
            Ws2812fxMode::Custom1 => "WS2812FX_MODE_CUSTOM_1",
            Ws2812fxMode::Custom2 => "WS2812FX_MODE_CUSTOM_2",
            Ws2812fxMode::Custom3 => "WS2812FX_MODE_CUSTOM_3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WS2812FX_MODE_STATIC" => Some(Self::Static),
            "WS2812FX_MODE_BLINK" => Some(Self::Blink),
            "WS2812FX_MODE_BREATH" => Some(Self::Breath),
            "WS2812FX_MODE_COLOR_WIPE" => Some(Self::ColorWipe),
            "WS2812FX_MODE_COLOR_WIPE_INV" => Some(Self::ColorWipeInv),
            "WS2812FX_MODE_COLOR_WIPE_REV" => Some(Self::ColorWipeRev),
            "WS2812FX_MODE_COLOR_WIPE_REV_INV" => Some(Self::ColorWipeRevInv),
            "WS2812FX_MODE_COLOR_WIPE_RANDOM" => Some(Self::ColorWipeRandom),
            "WS2812FX_MODE_RANDOM_COLOR" => Some(Self::RandomColor),
            "WS2812FX_MODE_SINGLE_DYNAMIC" => Some(Self::SingleDynamic),
            "WS2812FX_MODE_MULTI_DYNAMIC" => Some(Self::MultiDynamic),
            "WS2812FX_MODE_RAINBOW" => Some(Self::Rainbow),
            "WS2812FX_MODE_RAINBOW_CYCLE" => Some(Self::RainbowCycle),
            "WS2812FX_MODE_SCAN" => Some(Self::Scan),
            "WS2812FX_MODE_DUAL_SCAN" => Some(Self::DualScan),
            "WS2812FX_MODE_FADE" => Some(Self::Fade),
            "WS2812FX_MODE_THEATER_CHASE" => Some(Self::TheaterChase),
            "WS2812FX_MODE_THEATER_CHASE_RAINBOW" => Some(Self::TheaterChaseRainbow),
            "WS2812FX_MODE_RUNNING_LIGHTS" => Some(Self::RunningLights),
            "WS2812FX_MODE_TWINKLE" => Some(Self::Twinkle),
            "WS2812FX_MODE_TWINKLE_FADE" => Some(Self::TwinkleFade),
            "WS2812FX_MODE_TWINKLE_RANDOM" => Some(Self::TwinkleRandom),
            "WS2812FX_MODE_SPARKLE" => Some(Self::Sparkle),
            "WS2812FX_MODE_FLASH_SPARKLE" => Some(Self::FlashSparkle),
            "WS2812FX_MODE_HYPER_SPARKLE" => Some(Self::HyperSparkle),
            "WS2812FX_MODE_STROBE" => Some(Self::Strobe),
            "WS2812FX_MODE_STROBE_RAINBOW" => Some(Self::StrobeRainbow),
            "WS2812FX_MODE_MULTI_STROBE" => Some(Self::MultiStrobe),
            "WS2812FX_MODE_BLINK_RAINBOW" => Some(Self::BlinkRainbow),
            "WS2812FX_MODE_CHASE_WHITE" => Some(Self::ChaseWhite),
            "WS2812FX_MODE_CHASE_COLOR" => Some(Self::ChaseColor),
            "WS2812FX_MODE_CHASE_RANDOM" => Some(Self::ChaseRandom),
            "WS2812FX_MODE_CHASE_RAINBOW" => Some(Self::ChaseRainbow),
            "WS2812FX_MODE_CHASE_FLASH" => Some(Self::ChaseFlash),
            "WS2812FX_MODE_CHASE_FLASH_RANDOM" => Some(Self::ChaseFlashRandom),
            "WS2812FX_MODE_CHASE_RAINBOW_WHITE" => Some(Self::ChaseRainbowWhite),
            "WS2812FX_MODE_CHASE_BLACKOUT" => Some(Self::ChaseBlackout),
            "WS2812FX_MODE_CHASE_BLACKOUT_RAINBOW" => Some(Self::ChaseBlackoutRainbow),
            "WS2812FX_MODE_COLOR_SWEEP_RANDOM" => Some(Self::ColorSweepRandom),
            "WS2812FX_MODE_RUNNING_COLOR" => Some(Self::RunningColor),
            "WS2812FX_MODE_RUNNING_RED_BLUE" => Some(Self::RunningRedBlue),
            "WS2812FX_MODE_RUNNING_RANDOM" => Some(Self::RunningRandom),
            "WS2812FX_MODE_LARSON_SCANNER" => Some(Self::LarsonScanner),
            "WS2812FX_MODE_COMET" => Some(Self::Comet),
            "WS2812FX_MODE_FIREWORKS" => Some(Self::Fireworks),
            "WS2812FX_MODE_FIREWORKS_RANDOM" => Some(Self::FireworksRandom),
            "WS2812FX_MODE_MERRY_CHRISTMAS" => Some(Self::MerryChristmas),
            "WS2812FX_MODE_FIRE_FLICKER" => Some(Self::FireFlicker),
            "WS2812FX_MODE_FIRE_FLICKER_SOFT" => Some(Self::FireFlickerSoft),
            "WS2812FX_MODE_FIRE_FLICKER_INTENSE" => Some(Self::FireFlickerIntense),
            "WS2812FX_MODE_CIRCUS_COMBUSTUS" => Some(Self::CircusCombustus),
            "WS2812FX_MODE_HALLOWEEN" => Some(Self::Halloween),
            "WS2812FX_MODE_BICOLOR_CHASE" => Some(Self::BicolorChase),
            "WS2812FX_MODE_TRICOLOR_CHASE" => Some(Self::TricolorChase),
            "WS2812FX_MODE_ICU" => Some(Self::Icu),
            "WS2812FX_MODE_CUSTOM_0" => Some(Self::Custom0),
            "WS2812FX_MODE_CUSTOM_1" => Some(Self::Custom1),
            "WS2812FX_MODE_CUSTOM_2" => Some(Self::Custom2),
            "WS2812FX_MODE_CUSTOM_3" => Some(Self::Custom3),
            _ => None,
        }
    }
}
/// WS2812FX segment modes
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ws2812fxSegmentMode {
    Freeze = 0,
    Hold = 1,
    Off = 2,
    On = 3,
}
impl Ws2812fxSegmentMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ws2812fxSegmentMode::Freeze => "WS2812FX_SEGMENT_MODE_FREEZE",
            Ws2812fxSegmentMode::Hold => "WS2812FX_SEGMENT_MODE_HOLD",
            Ws2812fxSegmentMode::Off => "WS2812FX_SEGMENT_MODE_OFF",
            Ws2812fxSegmentMode::On => "WS2812FX_SEGMENT_MODE_ON",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WS2812FX_SEGMENT_MODE_FREEZE" => Some(Self::Freeze),
            "WS2812FX_SEGMENT_MODE_HOLD" => Some(Self::Hold),
            "WS2812FX_SEGMENT_MODE_OFF" => Some(Self::Off),
            "WS2812FX_SEGMENT_MODE_ON" => Some(Self::On),
            _ => None,
        }
    }
}
/// WS2812FX color orders
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ws2812fxColorOrder {
    NotSet = 0,
    Rgb = 1,
    Rbg = 2,
    Grb = 3,
    Gbr = 4,
    Brg = 5,
    Bgr = 6,
    Wrgb = 7,
    Wrbg = 8,
    Wgrb = 9,
    Wgbr = 10,
    Wbrg = 11,
    Wbgr = 12,
    Rwgb = 13,
    Rwbg = 14,
    Rgwb = 15,
    Rgbw = 16,
    Rbwg = 17,
    Rbgw = 18,
    Gwrb = 19,
    Gwbr = 20,
    Grwb = 21,
    Grbw = 22,
    Gbwr = 23,
    Gbrw = 24,
    Bwrg = 25,
    Bwgr = 26,
    Brwg = 27,
    Brgw = 28,
    Bgwr = 29,
    Bgrw = 30,
}
impl Ws2812fxColorOrder {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ws2812fxColorOrder::NotSet => "WS2812FX_COLOR_ORDER_NOT_SET",
            Ws2812fxColorOrder::Rgb => "WS2812FX_COLOR_ORDER_RGB",
            Ws2812fxColorOrder::Rbg => "WS2812FX_COLOR_ORDER_RBG",
            Ws2812fxColorOrder::Grb => "WS2812FX_COLOR_ORDER_GRB",
            Ws2812fxColorOrder::Gbr => "WS2812FX_COLOR_ORDER_GBR",
            Ws2812fxColorOrder::Brg => "WS2812FX_COLOR_ORDER_BRG",
            Ws2812fxColorOrder::Bgr => "WS2812FX_COLOR_ORDER_BGR",
            Ws2812fxColorOrder::Wrgb => "WS2812FX_COLOR_ORDER_WRGB",
            Ws2812fxColorOrder::Wrbg => "WS2812FX_COLOR_ORDER_WRBG",
            Ws2812fxColorOrder::Wgrb => "WS2812FX_COLOR_ORDER_WGRB",
            Ws2812fxColorOrder::Wgbr => "WS2812FX_COLOR_ORDER_WGBR",
            Ws2812fxColorOrder::Wbrg => "WS2812FX_COLOR_ORDER_WBRG",
            Ws2812fxColorOrder::Wbgr => "WS2812FX_COLOR_ORDER_WBGR",
            Ws2812fxColorOrder::Rwgb => "WS2812FX_COLOR_ORDER_RWGB",
            Ws2812fxColorOrder::Rwbg => "WS2812FX_COLOR_ORDER_RWBG",
            Ws2812fxColorOrder::Rgwb => "WS2812FX_COLOR_ORDER_RGWB",
            Ws2812fxColorOrder::Rgbw => "WS2812FX_COLOR_ORDER_RGBW",
            Ws2812fxColorOrder::Rbwg => "WS2812FX_COLOR_ORDER_RBWG",
            Ws2812fxColorOrder::Rbgw => "WS2812FX_COLOR_ORDER_RBGW",
            Ws2812fxColorOrder::Gwrb => "WS2812FX_COLOR_ORDER_GWRB",
            Ws2812fxColorOrder::Gwbr => "WS2812FX_COLOR_ORDER_GWBR",
            Ws2812fxColorOrder::Grwb => "WS2812FX_COLOR_ORDER_GRWB",
            Ws2812fxColorOrder::Grbw => "WS2812FX_COLOR_ORDER_GRBW",
            Ws2812fxColorOrder::Gbwr => "WS2812FX_COLOR_ORDER_GBWR",
            Ws2812fxColorOrder::Gbrw => "WS2812FX_COLOR_ORDER_GBRW",
            Ws2812fxColorOrder::Bwrg => "WS2812FX_COLOR_ORDER_BWRG",
            Ws2812fxColorOrder::Bwgr => "WS2812FX_COLOR_ORDER_BWGR",
            Ws2812fxColorOrder::Brwg => "WS2812FX_COLOR_ORDER_BRWG",
            Ws2812fxColorOrder::Brgw => "WS2812FX_COLOR_ORDER_BRGW",
            Ws2812fxColorOrder::Bgwr => "WS2812FX_COLOR_ORDER_BGWR",
            Ws2812fxColorOrder::Bgrw => "WS2812FX_COLOR_ORDER_BGRW",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WS2812FX_COLOR_ORDER_NOT_SET" => Some(Self::NotSet),
            "WS2812FX_COLOR_ORDER_RGB" => Some(Self::Rgb),
            "WS2812FX_COLOR_ORDER_RBG" => Some(Self::Rbg),
            "WS2812FX_COLOR_ORDER_GRB" => Some(Self::Grb),
            "WS2812FX_COLOR_ORDER_GBR" => Some(Self::Gbr),
            "WS2812FX_COLOR_ORDER_BRG" => Some(Self::Brg),
            "WS2812FX_COLOR_ORDER_BGR" => Some(Self::Bgr),
            "WS2812FX_COLOR_ORDER_WRGB" => Some(Self::Wrgb),
            "WS2812FX_COLOR_ORDER_WRBG" => Some(Self::Wrbg),
            "WS2812FX_COLOR_ORDER_WGRB" => Some(Self::Wgrb),
            "WS2812FX_COLOR_ORDER_WGBR" => Some(Self::Wgbr),
            "WS2812FX_COLOR_ORDER_WBRG" => Some(Self::Wbrg),
            "WS2812FX_COLOR_ORDER_WBGR" => Some(Self::Wbgr),
            "WS2812FX_COLOR_ORDER_RWGB" => Some(Self::Rwgb),
            "WS2812FX_COLOR_ORDER_RWBG" => Some(Self::Rwbg),
            "WS2812FX_COLOR_ORDER_RGWB" => Some(Self::Rgwb),
            "WS2812FX_COLOR_ORDER_RGBW" => Some(Self::Rgbw),
            "WS2812FX_COLOR_ORDER_RBWG" => Some(Self::Rbwg),
            "WS2812FX_COLOR_ORDER_RBGW" => Some(Self::Rbgw),
            "WS2812FX_COLOR_ORDER_GWRB" => Some(Self::Gwrb),
            "WS2812FX_COLOR_ORDER_GWBR" => Some(Self::Gwbr),
            "WS2812FX_COLOR_ORDER_GRWB" => Some(Self::Grwb),
            "WS2812FX_COLOR_ORDER_GRBW" => Some(Self::Grbw),
            "WS2812FX_COLOR_ORDER_GBWR" => Some(Self::Gbwr),
            "WS2812FX_COLOR_ORDER_GBRW" => Some(Self::Gbrw),
            "WS2812FX_COLOR_ORDER_BWRG" => Some(Self::Bwrg),
            "WS2812FX_COLOR_ORDER_BWGR" => Some(Self::Bwgr),
            "WS2812FX_COLOR_ORDER_BRWG" => Some(Self::Brwg),
            "WS2812FX_COLOR_ORDER_BRGW" => Some(Self::Brgw),
            "WS2812FX_COLOR_ORDER_BGWR" => Some(Self::Bgwr),
            "WS2812FX_COLOR_ORDER_BGRW" => Some(Self::Bgrw),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ws2812fxNeoPixelTxRate {
    NotSet = 0,
    Ws2812fxNeoPixelTxRate400Khz = 1,
    Ws2812fxNeoPixelTxRate800Khz = 2,
}
impl Ws2812fxNeoPixelTxRate {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ws2812fxNeoPixelTxRate::NotSet => "WS2812FX_NEO_PIXEL_TX_RATE_NOT_SET",
            Ws2812fxNeoPixelTxRate::Ws2812fxNeoPixelTxRate400Khz => "WS2812FX_NEO_PIXEL_TX_RATE_400_KHZ",
            Ws2812fxNeoPixelTxRate::Ws2812fxNeoPixelTxRate800Khz => "WS2812FX_NEO_PIXEL_TX_RATE_800_KHZ",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WS2812FX_NEO_PIXEL_TX_RATE_NOT_SET" => Some(Self::NotSet),
            "WS2812FX_NEO_PIXEL_TX_RATE_400_KHZ" => Some(Self::Ws2812fxNeoPixelTxRate400Khz),
            "WS2812FX_NEO_PIXEL_TX_RATE_800_KHZ" => Some(Self::Ws2812fxNeoPixelTxRate800Khz),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivateLineTargetRequest {
    #[prost(message, optional, tag="1")]
    pub background_color: ::core::option::Option<QromaColor>,
    #[prost(message, optional, tag="2")]
    pub target_color: ::core::option::Option<QromaColor>,
    #[prost(uint32, tag="3")]
    pub target_start_index: u32,
    #[prost(uint32, tag="4")]
    pub target_end_index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QromaLineTargetCommand {
    #[prost(oneof="qroma_line_target_command::Command", tags="1")]
    pub command: ::core::option::Option<qroma_line_target_command::Command>,
}
/// Nested message and enum types in `QromaLineTargetCommand`.
pub mod qroma_line_target_command {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Command {
        #[prost(message, tag="1")]
        ActivateLineTarget(super::ActivateLineTargetRequest),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HelloQromaRequest {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HelloQromaResponse {
    #[prost(string, tag="1")]
    pub response: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub call_count: u32,
    #[prost(uint32, tag="3")]
    pub name_length: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MathRequest {
    #[prost(uint32, tag="1")]
    pub a: u32,
    #[prost(uint32, tag="2")]
    pub b: u32,
    #[prost(enumeration="MathOperation", tag="3")]
    pub op: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MathResultAdd {
    #[prost(uint32, tag="1")]
    pub result: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MathResultSubtract {
    #[prost(uint32, tag="1")]
    pub result: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MathResultAddAndSubtract {
    #[prost(uint32, tag="1")]
    pub add_result: u32,
    #[prost(uint32, tag="2")]
    pub subtract_result: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MathResponse {
    #[prost(oneof="math_response::Response", tags="1, 2, 3")]
    pub response: ::core::option::Option<math_response::Response>,
}
/// Nested message and enum types in `MathResponse`.
pub mod math_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag="1")]
        AddResult(super::MathResultAdd),
        #[prost(message, tag="2")]
        SubtractResult(super::MathResultSubtract),
        #[prost(message, tag="3")]
        AddAndSubtractResult(super::MathResultAddAndSubtract),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardDetails {
    #[prost(string, tag="1")]
    pub board_name: ::prost::alloc::string::String,
    #[prost(bool, tag="2")]
    pub has_rgb: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MyProjectDetails {
    #[prost(string, tag="1")]
    pub project_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MyProjectConfiguration {
    #[prost(string, tag="1")]
    pub user_name: ::prost::alloc::string::String,
    #[prost(uint32, tag="2")]
    pub startup_red: u32,
    #[prost(uint32, tag="3")]
    pub startup_green: u32,
    #[prost(uint32, tag="4")]
    pub startup_blue: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetProjectDetailsResponse {
    #[prost(message, optional, tag="1")]
    pub project_details: ::core::option::Option<MyProjectDetails>,
    #[prost(message, optional, tag="2")]
    pub current_configuration: ::core::option::Option<MyProjectConfiguration>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetBoardLightColorRequest {
    #[prost(uint32, tag="1")]
    pub red: u32,
    #[prost(uint32, tag="2")]
    pub green: u32,
    #[prost(uint32, tag="3")]
    pub blue: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetBoardLightColorResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
    #[prost(string, tag="2")]
    pub message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvalidCommandResponse {
    #[prost(string, tag="1")]
    pub message: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MyProjectCommand {
    #[prost(oneof="my_project_command::Command", tags="1, 2, 3, 4, 5, 6, 7")]
    pub command: ::core::option::Option<my_project_command::Command>,
}
/// Nested message and enum types in `MyProjectCommand`.
pub mod my_project_command {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Command {
        #[prost(enumeration="super::NoArgCommands", tag="1")]
        NoArgCommand(i32),
        #[prost(message, tag="2")]
        HelloQromaRequest(super::HelloQromaRequest),
        #[prost(message, tag="3")]
        MathRequest(super::MathRequest),
        #[prost(message, tag="4")]
        SetBoardLightColorRequest(super::SetBoardLightColorRequest),
        #[prost(message, tag="5")]
        SetMyProjectConfigurationRequest(super::MyProjectConfiguration),
        #[prost(message, tag="6")]
        QromaWs2812fxApiTx(super::Ws2812FxApiTx),
        #[prost(message, tag="7")]
        QromaLineTargetCommand(super::QromaLineTargetCommand),
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MyProjectResponse {
    #[prost(oneof="my_project_response::Response", tags="1, 2, 3, 4, 5, 6, 7, 8")]
    pub response: ::core::option::Option<my_project_response::Response>,
}
/// Nested message and enum types in `MyProjectResponse`.
pub mod my_project_response {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Response {
        #[prost(message, tag="1")]
        InvalidCommandResponse(super::InvalidCommandResponse),
        #[prost(message, tag="2")]
        HelloQromaResponse(super::HelloQromaResponse),
        #[prost(message, tag="3")]
        MathResponse(super::MathResponse),
        #[prost(message, tag="4")]
        GetBoardDetailsResponse(super::BoardDetails),
        #[prost(message, tag="5")]
        SetBoardLightColorResponse(super::SetBoardLightColorResponse),
        #[prost(message, tag="6")]
        GetProjectDetailsResponse(super::GetProjectDetailsResponse),
        #[prost(message, tag="7")]
        QromaWs2812fxApiRx(super::Ws2812FxApiRx),
        #[prost(message, tag="8")]
        AckQromaLineTargetCommand(super::QromaLineTargetCommand),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MathOperation {
    MathOpNotSet = 0,
    MathOpAdd = 1,
    MathOpSubtract = 2,
    MathOpAddAndSubtract = 3,
}
impl MathOperation {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MathOperation::MathOpNotSet => "MathOp_NotSet",
            MathOperation::MathOpAdd => "MathOp_Add",
            MathOperation::MathOpSubtract => "MathOp_Subtract",
            MathOperation::MathOpAddAndSubtract => "MathOp_Add_And_Subtract",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MathOp_NotSet" => Some(Self::MathOpNotSet),
            "MathOp_Add" => Some(Self::MathOpAdd),
            "MathOp_Subtract" => Some(Self::MathOpSubtract),
            "MathOp_Add_And_Subtract" => Some(Self::MathOpAddAndSubtract),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NoArgCommands {
    NacNotSet = 0,
    NacGetProjectDetailsRequest = 1,
    NacGetBoardDetailsRequest = 2,
    NacSaveCurrentConfiguration = 3,
    NacLoadSavedConfiguration = 4,
}
impl NoArgCommands {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            NoArgCommands::NacNotSet => "Nac_NotSet",
            NoArgCommands::NacGetProjectDetailsRequest => "Nac_GetProjectDetailsRequest",
            NoArgCommands::NacGetBoardDetailsRequest => "Nac_GetBoardDetailsRequest",
            NoArgCommands::NacSaveCurrentConfiguration => "Nac_SaveCurrentConfiguration",
            NoArgCommands::NacLoadSavedConfiguration => "Nac_LoadSavedConfiguration",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Nac_NotSet" => Some(Self::NacNotSet),
            "Nac_GetProjectDetailsRequest" => Some(Self::NacGetProjectDetailsRequest),
            "Nac_GetBoardDetailsRequest" => Some(Self::NacGetBoardDetailsRequest),
            "Nac_SaveCurrentConfiguration" => Some(Self::NacSaveCurrentConfiguration),
            "Nac_LoadSavedConfiguration" => Some(Self::NacLoadSavedConfiguration),
            _ => None,
        }
    }
}
// @@protoc_insertion_point(module)
