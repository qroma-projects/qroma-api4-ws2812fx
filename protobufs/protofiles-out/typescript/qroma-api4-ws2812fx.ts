// @generated by protobuf-ts 2.9.4 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-api4-ws2812fx.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
// ============================================================================
// BASIC CONTROL MESSAGES
// ============================================================================

/**
 * Initialize WS2812FX strip
 *
 * @generated from protobuf message WS2812FxConstructAndInitRequest
 */
export interface WS2812FxConstructAndInitRequest {
    /**
     * @generated from protobuf field: uint32 ledCount = 1;
     */
    ledCount: number; // Number of LEDs in strip
    /**
     * @generated from protobuf field: uint32 pin = 2;
     */
    pin: number; // GPIO pin number
    /**
     * @generated from protobuf field: WS2812FXColorOrder neoPixelRgbOrder = 3;
     */
    neoPixelRgbOrder: WS2812FXColorOrder; // Color order
    /**
     * @generated from protobuf field: WS2812FX_NeoPixelTxRate neoPixelTxRate = 4;
     */
    neoPixelTxRate: WS2812FX_NeoPixelTxRate; // NeoPixel transmission rate
}
/**
 * @generated from protobuf message NoArgRequest
 */
export interface NoArgRequest {
}
/**
 * @generated from protobuf message NoArgResponse
 */
export interface NoArgResponse {
}
/**
 * @generated from protobuf message QromaColor
 */
export interface QromaColor {
    /**
     * @generated from protobuf field: uint32 red = 1;
     */
    red: number;
    /**
     * @generated from protobuf field: uint32 green = 2;
     */
    green: number;
    /**
     * @generated from protobuf field: uint32 blue = 3;
     */
    blue: number;
}
/**
 * @generated from protobuf message SetPixelColorRequest
 */
export interface SetPixelColorRequest {
    /**
     * @generated from protobuf field: uint32 pixelIndex = 1;
     */
    pixelIndex: number;
    /**
     * @generated from protobuf field: QromaColor color = 2;
     */
    color?: QromaColor;
}
/**
 * @generated from protobuf message FillRequest
 */
export interface FillRequest {
    /**
     * @generated from protobuf field: QromaColor color = 1;
     */
    color?: QromaColor;
    /**
     * @generated from protobuf field: uint32 firstPixel = 2;
     */
    firstPixel: number;
    /**
     * @generated from protobuf field: uint32 numPixels = 3;
     */
    numPixels: number;
}
/**
 * @generated from protobuf message SetModeRequest
 */
export interface SetModeRequest {
    /**
     * @generated from protobuf field: WS2812FXMode mode = 1;
     */
    mode: WS2812FXMode;
}
/**
 * @generated from protobuf message SetBrightnessRequest
 */
export interface SetBrightnessRequest {
    /**
     * @generated from protobuf field: uint32 brightness = 1;
     */
    brightness: number;
}
/**
 * @generated from protobuf message SetSpeedRequest
 */
export interface SetSpeedRequest {
    /**
     * @generated from protobuf field: uint32 speed = 1;
     */
    speed: number;
}
/**
 * @generated from protobuf message IncreaseBrightnessRequest
 */
export interface IncreaseBrightnessRequest {
    /**
     * @generated from protobuf field: uint32 amount = 1;
     */
    amount: number;
}
/**
 * @generated from protobuf message DecreaseBrightnessRequest
 */
export interface DecreaseBrightnessRequest {
    /**
     * @generated from protobuf field: uint32 amount = 1;
     */
    amount: number;
}
// ============================================================================
// COMMAND/RESPONSE WRAPPERS
// ============================================================================

/**
 * Main command wrapper
 *
 * @generated from protobuf message Ws2812FxApiTx
 */
export interface Ws2812FxApiTx {
    /**
     * @generated from protobuf oneof: request
     */
    request: {
        oneofKind: "constructAndInit";
        /**
         * @generated from protobuf field: WS2812FxConstructAndInitRequest constructAndInit = 1;
         */
        constructAndInit: WS2812FxConstructAndInitRequest;
    } | {
        oneofKind: "start";
        /**
         * @generated from protobuf field: NoArgRequest start = 2;
         */
        start: NoArgRequest;
    } | {
        oneofKind: "stop";
        /**
         * @generated from protobuf field: NoArgRequest stop = 3;
         */
        stop: NoArgRequest;
    } | {
        oneofKind: "pause";
        /**
         * @generated from protobuf field: NoArgRequest pause = 4;
         */
        pause: NoArgRequest;
    } | {
        oneofKind: "resume";
        /**
         * @generated from protobuf field: NoArgRequest resume = 5;
         */
        resume: NoArgRequest;
    } | {
        oneofKind: "service";
        /**
         * @generated from protobuf field: NoArgRequest service = 6;
         */
        service: NoArgRequest;
    } | {
        oneofKind: "show";
        /**
         * @generated from protobuf field: NoArgRequest show = 7;
         */
        show: NoArgRequest;
    } | {
        oneofKind: "stripOff";
        /**
         * @generated from protobuf field: NoArgRequest stripOff = 8;
         */
        stripOff: NoArgRequest;
    } | {
        oneofKind: "fadeOut";
        /**
         * @generated from protobuf field: NoArgRequest fadeOut = 9;
         */
        fadeOut: NoArgRequest;
    } | {
        oneofKind: "fadeOutToColor";
        /**
         * @generated from protobuf field: QromaColor fadeOutToColor = 10;
         */
        fadeOutToColor: QromaColor;
    } | {
        oneofKind: "setMode";
        /**
         * @generated from protobuf field: SetModeRequest setMode = 11;
         */
        setMode: SetModeRequest;
    } | {
        oneofKind: "setColor";
        /**
         * @generated from protobuf field: QromaColor setColor = 12;
         */
        setColor: QromaColor;
    } | {
        oneofKind: "setSpeed";
        /**
         * @generated from protobuf field: SetSpeedRequest setSpeed = 13;
         */
        setSpeed: SetSpeedRequest;
    } | {
        oneofKind: "fill";
        /**
         * @generated from protobuf field: FillRequest fill = 14;
         */
        fill: FillRequest;
    } | {
        oneofKind: "setPixelColor";
        /**
         * @generated from protobuf field: SetPixelColorRequest setPixelColor = 15;
         */
        setPixelColor: SetPixelColorRequest;
    } | {
        oneofKind: "setBrightness";
        /**
         * @generated from protobuf field: SetBrightnessRequest setBrightness = 16;
         */
        setBrightness: SetBrightnessRequest;
    } | {
        oneofKind: "increaseBrightness";
        /**
         * @generated from protobuf field: IncreaseBrightnessRequest increaseBrightness = 17;
         */
        increaseBrightness: IncreaseBrightnessRequest;
    } | {
        oneofKind: "decreaseBrightness";
        /**
         * @generated from protobuf field: DecreaseBrightnessRequest decreaseBrightness = 18;
         */
        decreaseBrightness: DecreaseBrightnessRequest;
    } | {
        oneofKind: undefined;
    };
}
/**
 * Main response wrapper
 *
 * @generated from protobuf message Ws2812FxApiRx
 */
export interface Ws2812FxApiRx {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "ackConstructAndInit";
        /**
         * @generated from protobuf field: WS2812FxConstructAndInitRequest ackConstructAndInit = 1;
         */
        ackConstructAndInit: WS2812FxConstructAndInitRequest;
    } | {
        oneofKind: "ackStart";
        /**
         * @generated from protobuf field: NoArgResponse ackStart = 2;
         */
        ackStart: NoArgResponse;
    } | {
        oneofKind: "ackStop";
        /**
         * @generated from protobuf field: NoArgResponse ackStop = 3;
         */
        ackStop: NoArgResponse;
    } | {
        oneofKind: "ackPause";
        /**
         * @generated from protobuf field: NoArgResponse ackPause = 4;
         */
        ackPause: NoArgResponse;
    } | {
        oneofKind: "ackResume";
        /**
         * @generated from protobuf field: NoArgResponse ackResume = 5;
         */
        ackResume: NoArgResponse;
    } | {
        oneofKind: "ackService";
        /**
         * @generated from protobuf field: NoArgResponse ackService = 6;
         */
        ackService: NoArgResponse;
    } | {
        oneofKind: "ackShow";
        /**
         * @generated from protobuf field: NoArgResponse ackShow = 7;
         */
        ackShow: NoArgResponse;
    } | {
        oneofKind: "ackStripOff";
        /**
         * @generated from protobuf field: NoArgResponse ackStripOff = 8;
         */
        ackStripOff: NoArgResponse;
    } | {
        oneofKind: "ackFadeOut";
        /**
         * @generated from protobuf field: NoArgResponse ackFadeOut = 9;
         */
        ackFadeOut: NoArgResponse;
    } | {
        oneofKind: "ackFadeOutToColor";
        /**
         * @generated from protobuf field: QromaColor ackFadeOutToColor = 10;
         */
        ackFadeOutToColor: QromaColor;
    } | {
        oneofKind: "ackSetMode";
        /**
         * @generated from protobuf field: SetModeRequest ackSetMode = 11;
         */
        ackSetMode: SetModeRequest;
    } | {
        oneofKind: "ackSetColor";
        /**
         * @generated from protobuf field: QromaColor ackSetColor = 12;
         */
        ackSetColor: QromaColor;
    } | {
        oneofKind: "ackSetSpeed";
        /**
         * @generated from protobuf field: SetSpeedRequest ackSetSpeed = 13;
         */
        ackSetSpeed: SetSpeedRequest;
    } | {
        oneofKind: "ackFill";
        /**
         * @generated from protobuf field: FillRequest ackFill = 14;
         */
        ackFill: FillRequest;
    } | {
        oneofKind: "ackSetPixelColor";
        /**
         * @generated from protobuf field: SetPixelColorRequest ackSetPixelColor = 15;
         */
        ackSetPixelColor: SetPixelColorRequest;
    } | {
        oneofKind: "ackSetBrightness";
        /**
         * @generated from protobuf field: SetBrightnessRequest ackSetBrightness = 16;
         */
        ackSetBrightness: SetBrightnessRequest;
    } | {
        oneofKind: "ackIncreaseBrightness";
        /**
         * @generated from protobuf field: IncreaseBrightnessRequest ackIncreaseBrightness = 17;
         */
        ackIncreaseBrightness: IncreaseBrightnessRequest;
    } | {
        oneofKind: "ackDecreaseBrightness";
        /**
         * @generated from protobuf field: DecreaseBrightnessRequest ackDecreaseBrightness = 18;
         */
        ackDecreaseBrightness: DecreaseBrightnessRequest;
    } | {
        oneofKind: undefined;
    };
}
// WS2812FX Protocol Buffer Messages
// Maps to the WS2812FX library API from https://github.com/kitesurfer1404/WS2812FX

// ============================================================================
// ENUMS
// ============================================================================

/**
 * WS2812FX modes - maps to the FX_MODE_* constants
 *
 * @generated from protobuf enum WS2812FXMode
 */
export enum WS2812FXMode {
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_STATIC = 0;
     */
    WS2812FX_MODE_STATIC = 0,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_BLINK = 1;
     */
    WS2812FX_MODE_BLINK = 1,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_BREATH = 2;
     */
    WS2812FX_MODE_BREATH = 2,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_COLOR_WIPE = 3;
     */
    WS2812FX_MODE_COLOR_WIPE = 3,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_COLOR_WIPE_INV = 4;
     */
    WS2812FX_MODE_COLOR_WIPE_INV = 4,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_COLOR_WIPE_REV = 5;
     */
    WS2812FX_MODE_COLOR_WIPE_REV = 5,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_COLOR_WIPE_REV_INV = 6;
     */
    WS2812FX_MODE_COLOR_WIPE_REV_INV = 6,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_COLOR_WIPE_RANDOM = 7;
     */
    WS2812FX_MODE_COLOR_WIPE_RANDOM = 7,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_RANDOM_COLOR = 8;
     */
    WS2812FX_MODE_RANDOM_COLOR = 8,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_SINGLE_DYNAMIC = 9;
     */
    WS2812FX_MODE_SINGLE_DYNAMIC = 9,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_MULTI_DYNAMIC = 10;
     */
    WS2812FX_MODE_MULTI_DYNAMIC = 10,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_RAINBOW = 11;
     */
    WS2812FX_MODE_RAINBOW = 11,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_RAINBOW_CYCLE = 12;
     */
    WS2812FX_MODE_RAINBOW_CYCLE = 12,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_SCAN = 13;
     */
    WS2812FX_MODE_SCAN = 13,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_DUAL_SCAN = 14;
     */
    WS2812FX_MODE_DUAL_SCAN = 14,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_FADE = 15;
     */
    WS2812FX_MODE_FADE = 15,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_THEATER_CHASE = 16;
     */
    WS2812FX_MODE_THEATER_CHASE = 16,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_THEATER_CHASE_RAINBOW = 17;
     */
    WS2812FX_MODE_THEATER_CHASE_RAINBOW = 17,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_RUNNING_LIGHTS = 18;
     */
    WS2812FX_MODE_RUNNING_LIGHTS = 18,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_TWINKLE = 19;
     */
    WS2812FX_MODE_TWINKLE = 19,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_TWINKLE_FADE = 20;
     */
    WS2812FX_MODE_TWINKLE_FADE = 20,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_TWINKLE_RANDOM = 21;
     */
    WS2812FX_MODE_TWINKLE_RANDOM = 21,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_SPARKLE = 22;
     */
    WS2812FX_MODE_SPARKLE = 22,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_FLASH_SPARKLE = 23;
     */
    WS2812FX_MODE_FLASH_SPARKLE = 23,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_HYPER_SPARKLE = 24;
     */
    WS2812FX_MODE_HYPER_SPARKLE = 24,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_STROBE = 25;
     */
    WS2812FX_MODE_STROBE = 25,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_STROBE_RAINBOW = 26;
     */
    WS2812FX_MODE_STROBE_RAINBOW = 26,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_MULTI_STROBE = 27;
     */
    WS2812FX_MODE_MULTI_STROBE = 27,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_BLINK_RAINBOW = 28;
     */
    WS2812FX_MODE_BLINK_RAINBOW = 28,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CHASE_WHITE = 29;
     */
    WS2812FX_MODE_CHASE_WHITE = 29,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CHASE_COLOR = 30;
     */
    WS2812FX_MODE_CHASE_COLOR = 30,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CHASE_RANDOM = 31;
     */
    WS2812FX_MODE_CHASE_RANDOM = 31,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CHASE_RAINBOW = 32;
     */
    WS2812FX_MODE_CHASE_RAINBOW = 32,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CHASE_FLASH = 33;
     */
    WS2812FX_MODE_CHASE_FLASH = 33,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CHASE_FLASH_RANDOM = 34;
     */
    WS2812FX_MODE_CHASE_FLASH_RANDOM = 34,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CHASE_RAINBOW_WHITE = 35;
     */
    WS2812FX_MODE_CHASE_RAINBOW_WHITE = 35,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CHASE_BLACKOUT = 36;
     */
    WS2812FX_MODE_CHASE_BLACKOUT = 36,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CHASE_BLACKOUT_RAINBOW = 37;
     */
    WS2812FX_MODE_CHASE_BLACKOUT_RAINBOW = 37,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_COLOR_SWEEP_RANDOM = 38;
     */
    WS2812FX_MODE_COLOR_SWEEP_RANDOM = 38,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_RUNNING_COLOR = 39;
     */
    WS2812FX_MODE_RUNNING_COLOR = 39,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_RUNNING_RED_BLUE = 40;
     */
    WS2812FX_MODE_RUNNING_RED_BLUE = 40,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_RUNNING_RANDOM = 41;
     */
    WS2812FX_MODE_RUNNING_RANDOM = 41,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_LARSON_SCANNER = 42;
     */
    WS2812FX_MODE_LARSON_SCANNER = 42,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_COMET = 43;
     */
    WS2812FX_MODE_COMET = 43,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_FIREWORKS = 44;
     */
    WS2812FX_MODE_FIREWORKS = 44,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_FIREWORKS_RANDOM = 45;
     */
    WS2812FX_MODE_FIREWORKS_RANDOM = 45,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_MERRY_CHRISTMAS = 46;
     */
    WS2812FX_MODE_MERRY_CHRISTMAS = 46,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_FIRE_FLICKER = 47;
     */
    WS2812FX_MODE_FIRE_FLICKER = 47,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_FIRE_FLICKER_SOFT = 48;
     */
    WS2812FX_MODE_FIRE_FLICKER_SOFT = 48,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_FIRE_FLICKER_INTENSE = 49;
     */
    WS2812FX_MODE_FIRE_FLICKER_INTENSE = 49,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CIRCUS_COMBUSTUS = 50;
     */
    WS2812FX_MODE_CIRCUS_COMBUSTUS = 50,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_HALLOWEEN = 51;
     */
    WS2812FX_MODE_HALLOWEEN = 51,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_BICOLOR_CHASE = 52;
     */
    WS2812FX_MODE_BICOLOR_CHASE = 52,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_TRICOLOR_CHASE = 53;
     */
    WS2812FX_MODE_TRICOLOR_CHASE = 53,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_ICU = 54;
     */
    WS2812FX_MODE_ICU = 54,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CUSTOM_0 = 55;
     */
    WS2812FX_MODE_CUSTOM_0 = 55,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CUSTOM_1 = 56;
     */
    WS2812FX_MODE_CUSTOM_1 = 56,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CUSTOM_2 = 57;
     */
    WS2812FX_MODE_CUSTOM_2 = 57,
    /**
     * @generated from protobuf enum value: WS2812FX_MODE_CUSTOM_3 = 58;
     */
    WS2812FX_MODE_CUSTOM_3 = 58
}
/**
 * WS2812FX segment modes
 *
 * @generated from protobuf enum WS2812FXSegmentMode
 */
export enum WS2812FXSegmentMode {
    /**
     * @generated from protobuf enum value: WS2812FX_SEGMENT_MODE_FREEZE = 0;
     */
    WS2812FX_SEGMENT_MODE_FREEZE = 0,
    /**
     * @generated from protobuf enum value: WS2812FX_SEGMENT_MODE_HOLD = 1;
     */
    WS2812FX_SEGMENT_MODE_HOLD = 1,
    /**
     * @generated from protobuf enum value: WS2812FX_SEGMENT_MODE_OFF = 2;
     */
    WS2812FX_SEGMENT_MODE_OFF = 2,
    /**
     * @generated from protobuf enum value: WS2812FX_SEGMENT_MODE_ON = 3;
     */
    WS2812FX_SEGMENT_MODE_ON = 3
}
/**
 * WS2812FX color orders
 *
 * @generated from protobuf enum WS2812FXColorOrder
 */
export enum WS2812FXColorOrder {
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_NOT_SET = 0;
     */
    WS2812FX_COLOR_ORDER_NOT_SET = 0,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_RGB = 1;
     */
    WS2812FX_COLOR_ORDER_RGB = 1,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_RBG = 2;
     */
    WS2812FX_COLOR_ORDER_RBG = 2,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_GRB = 3;
     */
    WS2812FX_COLOR_ORDER_GRB = 3,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_GBR = 4;
     */
    WS2812FX_COLOR_ORDER_GBR = 4,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_BRG = 5;
     */
    WS2812FX_COLOR_ORDER_BRG = 5,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_BGR = 6;
     */
    WS2812FX_COLOR_ORDER_BGR = 6,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_WRGB = 7;
     */
    WS2812FX_COLOR_ORDER_WRGB = 7,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_WRBG = 8;
     */
    WS2812FX_COLOR_ORDER_WRBG = 8,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_WGRB = 9;
     */
    WS2812FX_COLOR_ORDER_WGRB = 9,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_WGBR = 10;
     */
    WS2812FX_COLOR_ORDER_WGBR = 10,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_WBRG = 11;
     */
    WS2812FX_COLOR_ORDER_WBRG = 11,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_WBGR = 12;
     */
    WS2812FX_COLOR_ORDER_WBGR = 12,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_RWGB = 13;
     */
    WS2812FX_COLOR_ORDER_RWGB = 13,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_RWBG = 14;
     */
    WS2812FX_COLOR_ORDER_RWBG = 14,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_RGWB = 15;
     */
    WS2812FX_COLOR_ORDER_RGWB = 15,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_RGBW = 16;
     */
    WS2812FX_COLOR_ORDER_RGBW = 16,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_RBWG = 17;
     */
    WS2812FX_COLOR_ORDER_RBWG = 17,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_RBGW = 18;
     */
    WS2812FX_COLOR_ORDER_RBGW = 18,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_GWRB = 19;
     */
    WS2812FX_COLOR_ORDER_GWRB = 19,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_GWBR = 20;
     */
    WS2812FX_COLOR_ORDER_GWBR = 20,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_GRWB = 21;
     */
    WS2812FX_COLOR_ORDER_GRWB = 21,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_GRBW = 22;
     */
    WS2812FX_COLOR_ORDER_GRBW = 22,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_GBWR = 23;
     */
    WS2812FX_COLOR_ORDER_GBWR = 23,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_GBRW = 24;
     */
    WS2812FX_COLOR_ORDER_GBRW = 24,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_BWRG = 25;
     */
    WS2812FX_COLOR_ORDER_BWRG = 25,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_BWGR = 26;
     */
    WS2812FX_COLOR_ORDER_BWGR = 26,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_BRWG = 27;
     */
    WS2812FX_COLOR_ORDER_BRWG = 27,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_BRGW = 28;
     */
    WS2812FX_COLOR_ORDER_BRGW = 28,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_BGWR = 29;
     */
    WS2812FX_COLOR_ORDER_BGWR = 29,
    /**
     * @generated from protobuf enum value: WS2812FX_COLOR_ORDER_BGRW = 30;
     */
    WS2812FX_COLOR_ORDER_BGRW = 30
}
/**
 * @generated from protobuf enum WS2812FX_NeoPixelTxRate
 */
export enum WS2812FX_NeoPixelTxRate {
    /**
     * @generated from protobuf enum value: WS2812FX_NEO_PIXEL_TX_RATE_NOT_SET = 0;
     */
    WS2812FX_NEO_PIXEL_TX_RATE_NOT_SET = 0,
    /**
     * @generated from protobuf enum value: WS2812FX_NEO_PIXEL_TX_RATE_400_KHZ = 1;
     */
    WS2812FX_NEO_PIXEL_TX_RATE_400_KHZ = 1,
    /**
     * @generated from protobuf enum value: WS2812FX_NEO_PIXEL_TX_RATE_800_KHZ = 2;
     */
    WS2812FX_NEO_PIXEL_TX_RATE_800_KHZ = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class WS2812FxConstructAndInitRequest$Type extends MessageType<WS2812FxConstructAndInitRequest> {
    constructor() {
        super("WS2812FxConstructAndInitRequest", [
            { no: 1, name: "ledCount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "pin", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "neoPixelRgbOrder", kind: "enum", T: () => ["WS2812FXColorOrder", WS2812FXColorOrder] },
            { no: 4, name: "neoPixelTxRate", kind: "enum", T: () => ["WS2812FX_NeoPixelTxRate", WS2812FX_NeoPixelTxRate] }
        ]);
    }
    create(value?: PartialMessage<WS2812FxConstructAndInitRequest>): WS2812FxConstructAndInitRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ledCount = 0;
        message.pin = 0;
        message.neoPixelRgbOrder = 0;
        message.neoPixelTxRate = 0;
        if (value !== undefined)
            reflectionMergePartial<WS2812FxConstructAndInitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WS2812FxConstructAndInitRequest): WS2812FxConstructAndInitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 ledCount */ 1:
                    message.ledCount = reader.uint32();
                    break;
                case /* uint32 pin */ 2:
                    message.pin = reader.uint32();
                    break;
                case /* WS2812FXColorOrder neoPixelRgbOrder */ 3:
                    message.neoPixelRgbOrder = reader.int32();
                    break;
                case /* WS2812FX_NeoPixelTxRate neoPixelTxRate */ 4:
                    message.neoPixelTxRate = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WS2812FxConstructAndInitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 ledCount = 1; */
        if (message.ledCount !== 0)
            writer.tag(1, WireType.Varint).uint32(message.ledCount);
        /* uint32 pin = 2; */
        if (message.pin !== 0)
            writer.tag(2, WireType.Varint).uint32(message.pin);
        /* WS2812FXColorOrder neoPixelRgbOrder = 3; */
        if (message.neoPixelRgbOrder !== 0)
            writer.tag(3, WireType.Varint).int32(message.neoPixelRgbOrder);
        /* WS2812FX_NeoPixelTxRate neoPixelTxRate = 4; */
        if (message.neoPixelTxRate !== 0)
            writer.tag(4, WireType.Varint).int32(message.neoPixelTxRate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message WS2812FxConstructAndInitRequest
 */
export const WS2812FxConstructAndInitRequest = new WS2812FxConstructAndInitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoArgRequest$Type extends MessageType<NoArgRequest> {
    constructor() {
        super("NoArgRequest", []);
    }
    create(value?: PartialMessage<NoArgRequest>): NoArgRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NoArgRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NoArgRequest): NoArgRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: NoArgRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NoArgRequest
 */
export const NoArgRequest = new NoArgRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NoArgResponse$Type extends MessageType<NoArgResponse> {
    constructor() {
        super("NoArgResponse", []);
    }
    create(value?: PartialMessage<NoArgResponse>): NoArgResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<NoArgResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NoArgResponse): NoArgResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: NoArgResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message NoArgResponse
 */
export const NoArgResponse = new NoArgResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaColor$Type extends MessageType<QromaColor> {
    constructor() {
        super("QromaColor", [
            { no: 1, name: "red", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "green", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "blue", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QromaColor>): QromaColor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.red = 0;
        message.green = 0;
        message.blue = 0;
        if (value !== undefined)
            reflectionMergePartial<QromaColor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaColor): QromaColor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 red */ 1:
                    message.red = reader.uint32();
                    break;
                case /* uint32 green */ 2:
                    message.green = reader.uint32();
                    break;
                case /* uint32 blue */ 3:
                    message.blue = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaColor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 red = 1; */
        if (message.red !== 0)
            writer.tag(1, WireType.Varint).uint32(message.red);
        /* uint32 green = 2; */
        if (message.green !== 0)
            writer.tag(2, WireType.Varint).uint32(message.green);
        /* uint32 blue = 3; */
        if (message.blue !== 0)
            writer.tag(3, WireType.Varint).uint32(message.blue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaColor
 */
export const QromaColor = new QromaColor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPixelColorRequest$Type extends MessageType<SetPixelColorRequest> {
    constructor() {
        super("SetPixelColorRequest", [
            { no: 1, name: "pixelIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "color", kind: "message", T: () => QromaColor }
        ]);
    }
    create(value?: PartialMessage<SetPixelColorRequest>): SetPixelColorRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pixelIndex = 0;
        if (value !== undefined)
            reflectionMergePartial<SetPixelColorRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPixelColorRequest): SetPixelColorRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 pixelIndex */ 1:
                    message.pixelIndex = reader.uint32();
                    break;
                case /* QromaColor color */ 2:
                    message.color = QromaColor.internalBinaryRead(reader, reader.uint32(), options, message.color);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPixelColorRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 pixelIndex = 1; */
        if (message.pixelIndex !== 0)
            writer.tag(1, WireType.Varint).uint32(message.pixelIndex);
        /* QromaColor color = 2; */
        if (message.color)
            QromaColor.internalBinaryWrite(message.color, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetPixelColorRequest
 */
export const SetPixelColorRequest = new SetPixelColorRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FillRequest$Type extends MessageType<FillRequest> {
    constructor() {
        super("FillRequest", [
            { no: 1, name: "color", kind: "message", T: () => QromaColor },
            { no: 2, name: "firstPixel", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "numPixels", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FillRequest>): FillRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.firstPixel = 0;
        message.numPixels = 0;
        if (value !== undefined)
            reflectionMergePartial<FillRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FillRequest): FillRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaColor color */ 1:
                    message.color = QromaColor.internalBinaryRead(reader, reader.uint32(), options, message.color);
                    break;
                case /* uint32 firstPixel */ 2:
                    message.firstPixel = reader.uint32();
                    break;
                case /* uint32 numPixels */ 3:
                    message.numPixels = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FillRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaColor color = 1; */
        if (message.color)
            QromaColor.internalBinaryWrite(message.color, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 firstPixel = 2; */
        if (message.firstPixel !== 0)
            writer.tag(2, WireType.Varint).uint32(message.firstPixel);
        /* uint32 numPixels = 3; */
        if (message.numPixels !== 0)
            writer.tag(3, WireType.Varint).uint32(message.numPixels);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message FillRequest
 */
export const FillRequest = new FillRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetModeRequest$Type extends MessageType<SetModeRequest> {
    constructor() {
        super("SetModeRequest", [
            { no: 1, name: "mode", kind: "enum", T: () => ["WS2812FXMode", WS2812FXMode] }
        ]);
    }
    create(value?: PartialMessage<SetModeRequest>): SetModeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mode = 0;
        if (value !== undefined)
            reflectionMergePartial<SetModeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetModeRequest): SetModeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WS2812FXMode mode */ 1:
                    message.mode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetModeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WS2812FXMode mode = 1; */
        if (message.mode !== 0)
            writer.tag(1, WireType.Varint).int32(message.mode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetModeRequest
 */
export const SetModeRequest = new SetModeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetBrightnessRequest$Type extends MessageType<SetBrightnessRequest> {
    constructor() {
        super("SetBrightnessRequest", [
            { no: 1, name: "brightness", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetBrightnessRequest>): SetBrightnessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brightness = 0;
        if (value !== undefined)
            reflectionMergePartial<SetBrightnessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetBrightnessRequest): SetBrightnessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 brightness */ 1:
                    message.brightness = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetBrightnessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 brightness = 1; */
        if (message.brightness !== 0)
            writer.tag(1, WireType.Varint).uint32(message.brightness);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetBrightnessRequest
 */
export const SetBrightnessRequest = new SetBrightnessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetSpeedRequest$Type extends MessageType<SetSpeedRequest> {
    constructor() {
        super("SetSpeedRequest", [
            { no: 1, name: "speed", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetSpeedRequest>): SetSpeedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.speed = 0;
        if (value !== undefined)
            reflectionMergePartial<SetSpeedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetSpeedRequest): SetSpeedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 speed */ 1:
                    message.speed = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetSpeedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 speed = 1; */
        if (message.speed !== 0)
            writer.tag(1, WireType.Varint).uint32(message.speed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SetSpeedRequest
 */
export const SetSpeedRequest = new SetSpeedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IncreaseBrightnessRequest$Type extends MessageType<IncreaseBrightnessRequest> {
    constructor() {
        super("IncreaseBrightnessRequest", [
            { no: 1, name: "amount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IncreaseBrightnessRequest>): IncreaseBrightnessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = 0;
        if (value !== undefined)
            reflectionMergePartial<IncreaseBrightnessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IncreaseBrightnessRequest): IncreaseBrightnessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 amount */ 1:
                    message.amount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IncreaseBrightnessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 amount = 1; */
        if (message.amount !== 0)
            writer.tag(1, WireType.Varint).uint32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message IncreaseBrightnessRequest
 */
export const IncreaseBrightnessRequest = new IncreaseBrightnessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecreaseBrightnessRequest$Type extends MessageType<DecreaseBrightnessRequest> {
    constructor() {
        super("DecreaseBrightnessRequest", [
            { no: 1, name: "amount", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DecreaseBrightnessRequest>): DecreaseBrightnessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = 0;
        if (value !== undefined)
            reflectionMergePartial<DecreaseBrightnessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecreaseBrightnessRequest): DecreaseBrightnessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 amount */ 1:
                    message.amount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecreaseBrightnessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 amount = 1; */
        if (message.amount !== 0)
            writer.tag(1, WireType.Varint).uint32(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message DecreaseBrightnessRequest
 */
export const DecreaseBrightnessRequest = new DecreaseBrightnessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Ws2812FxApiTx$Type extends MessageType<Ws2812FxApiTx> {
    constructor() {
        super("Ws2812FxApiTx", [
            { no: 1, name: "constructAndInit", kind: "message", oneof: "request", T: () => WS2812FxConstructAndInitRequest },
            { no: 2, name: "start", kind: "message", oneof: "request", T: () => NoArgRequest },
            { no: 3, name: "stop", kind: "message", oneof: "request", T: () => NoArgRequest },
            { no: 4, name: "pause", kind: "message", oneof: "request", T: () => NoArgRequest },
            { no: 5, name: "resume", kind: "message", oneof: "request", T: () => NoArgRequest },
            { no: 6, name: "service", kind: "message", oneof: "request", T: () => NoArgRequest },
            { no: 7, name: "show", kind: "message", oneof: "request", T: () => NoArgRequest },
            { no: 8, name: "stripOff", kind: "message", oneof: "request", T: () => NoArgRequest },
            { no: 9, name: "fadeOut", kind: "message", oneof: "request", T: () => NoArgRequest },
            { no: 10, name: "fadeOutToColor", kind: "message", oneof: "request", T: () => QromaColor },
            { no: 11, name: "setMode", kind: "message", oneof: "request", T: () => SetModeRequest },
            { no: 12, name: "setColor", kind: "message", oneof: "request", T: () => QromaColor },
            { no: 13, name: "setSpeed", kind: "message", oneof: "request", T: () => SetSpeedRequest },
            { no: 14, name: "fill", kind: "message", oneof: "request", T: () => FillRequest },
            { no: 15, name: "setPixelColor", kind: "message", oneof: "request", T: () => SetPixelColorRequest },
            { no: 16, name: "setBrightness", kind: "message", oneof: "request", T: () => SetBrightnessRequest },
            { no: 17, name: "increaseBrightness", kind: "message", oneof: "request", T: () => IncreaseBrightnessRequest },
            { no: 18, name: "decreaseBrightness", kind: "message", oneof: "request", T: () => DecreaseBrightnessRequest }
        ]);
    }
    create(value?: PartialMessage<Ws2812FxApiTx>): Ws2812FxApiTx {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.request = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Ws2812FxApiTx>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ws2812FxApiTx): Ws2812FxApiTx {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WS2812FxConstructAndInitRequest constructAndInit */ 1:
                    message.request = {
                        oneofKind: "constructAndInit",
                        constructAndInit: WS2812FxConstructAndInitRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).constructAndInit)
                    };
                    break;
                case /* NoArgRequest start */ 2:
                    message.request = {
                        oneofKind: "start",
                        start: NoArgRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).start)
                    };
                    break;
                case /* NoArgRequest stop */ 3:
                    message.request = {
                        oneofKind: "stop",
                        stop: NoArgRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).stop)
                    };
                    break;
                case /* NoArgRequest pause */ 4:
                    message.request = {
                        oneofKind: "pause",
                        pause: NoArgRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).pause)
                    };
                    break;
                case /* NoArgRequest resume */ 5:
                    message.request = {
                        oneofKind: "resume",
                        resume: NoArgRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).resume)
                    };
                    break;
                case /* NoArgRequest service */ 6:
                    message.request = {
                        oneofKind: "service",
                        service: NoArgRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).service)
                    };
                    break;
                case /* NoArgRequest show */ 7:
                    message.request = {
                        oneofKind: "show",
                        show: NoArgRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).show)
                    };
                    break;
                case /* NoArgRequest stripOff */ 8:
                    message.request = {
                        oneofKind: "stripOff",
                        stripOff: NoArgRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).stripOff)
                    };
                    break;
                case /* NoArgRequest fadeOut */ 9:
                    message.request = {
                        oneofKind: "fadeOut",
                        fadeOut: NoArgRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).fadeOut)
                    };
                    break;
                case /* QromaColor fadeOutToColor */ 10:
                    message.request = {
                        oneofKind: "fadeOutToColor",
                        fadeOutToColor: QromaColor.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).fadeOutToColor)
                    };
                    break;
                case /* SetModeRequest setMode */ 11:
                    message.request = {
                        oneofKind: "setMode",
                        setMode: SetModeRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).setMode)
                    };
                    break;
                case /* QromaColor setColor */ 12:
                    message.request = {
                        oneofKind: "setColor",
                        setColor: QromaColor.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).setColor)
                    };
                    break;
                case /* SetSpeedRequest setSpeed */ 13:
                    message.request = {
                        oneofKind: "setSpeed",
                        setSpeed: SetSpeedRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).setSpeed)
                    };
                    break;
                case /* FillRequest fill */ 14:
                    message.request = {
                        oneofKind: "fill",
                        fill: FillRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).fill)
                    };
                    break;
                case /* SetPixelColorRequest setPixelColor */ 15:
                    message.request = {
                        oneofKind: "setPixelColor",
                        setPixelColor: SetPixelColorRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).setPixelColor)
                    };
                    break;
                case /* SetBrightnessRequest setBrightness */ 16:
                    message.request = {
                        oneofKind: "setBrightness",
                        setBrightness: SetBrightnessRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).setBrightness)
                    };
                    break;
                case /* IncreaseBrightnessRequest increaseBrightness */ 17:
                    message.request = {
                        oneofKind: "increaseBrightness",
                        increaseBrightness: IncreaseBrightnessRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).increaseBrightness)
                    };
                    break;
                case /* DecreaseBrightnessRequest decreaseBrightness */ 18:
                    message.request = {
                        oneofKind: "decreaseBrightness",
                        decreaseBrightness: DecreaseBrightnessRequest.internalBinaryRead(reader, reader.uint32(), options, (message.request as any).decreaseBrightness)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Ws2812FxApiTx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WS2812FxConstructAndInitRequest constructAndInit = 1; */
        if (message.request.oneofKind === "constructAndInit")
            WS2812FxConstructAndInitRequest.internalBinaryWrite(message.request.constructAndInit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* NoArgRequest start = 2; */
        if (message.request.oneofKind === "start")
            NoArgRequest.internalBinaryWrite(message.request.start, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* NoArgRequest stop = 3; */
        if (message.request.oneofKind === "stop")
            NoArgRequest.internalBinaryWrite(message.request.stop, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* NoArgRequest pause = 4; */
        if (message.request.oneofKind === "pause")
            NoArgRequest.internalBinaryWrite(message.request.pause, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* NoArgRequest resume = 5; */
        if (message.request.oneofKind === "resume")
            NoArgRequest.internalBinaryWrite(message.request.resume, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* NoArgRequest service = 6; */
        if (message.request.oneofKind === "service")
            NoArgRequest.internalBinaryWrite(message.request.service, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* NoArgRequest show = 7; */
        if (message.request.oneofKind === "show")
            NoArgRequest.internalBinaryWrite(message.request.show, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* NoArgRequest stripOff = 8; */
        if (message.request.oneofKind === "stripOff")
            NoArgRequest.internalBinaryWrite(message.request.stripOff, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* NoArgRequest fadeOut = 9; */
        if (message.request.oneofKind === "fadeOut")
            NoArgRequest.internalBinaryWrite(message.request.fadeOut, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* QromaColor fadeOutToColor = 10; */
        if (message.request.oneofKind === "fadeOutToColor")
            QromaColor.internalBinaryWrite(message.request.fadeOutToColor, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* SetModeRequest setMode = 11; */
        if (message.request.oneofKind === "setMode")
            SetModeRequest.internalBinaryWrite(message.request.setMode, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* QromaColor setColor = 12; */
        if (message.request.oneofKind === "setColor")
            QromaColor.internalBinaryWrite(message.request.setColor, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* SetSpeedRequest setSpeed = 13; */
        if (message.request.oneofKind === "setSpeed")
            SetSpeedRequest.internalBinaryWrite(message.request.setSpeed, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* FillRequest fill = 14; */
        if (message.request.oneofKind === "fill")
            FillRequest.internalBinaryWrite(message.request.fill, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* SetPixelColorRequest setPixelColor = 15; */
        if (message.request.oneofKind === "setPixelColor")
            SetPixelColorRequest.internalBinaryWrite(message.request.setPixelColor, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* SetBrightnessRequest setBrightness = 16; */
        if (message.request.oneofKind === "setBrightness")
            SetBrightnessRequest.internalBinaryWrite(message.request.setBrightness, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* IncreaseBrightnessRequest increaseBrightness = 17; */
        if (message.request.oneofKind === "increaseBrightness")
            IncreaseBrightnessRequest.internalBinaryWrite(message.request.increaseBrightness, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* DecreaseBrightnessRequest decreaseBrightness = 18; */
        if (message.request.oneofKind === "decreaseBrightness")
            DecreaseBrightnessRequest.internalBinaryWrite(message.request.decreaseBrightness, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ws2812FxApiTx
 */
export const Ws2812FxApiTx = new Ws2812FxApiTx$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Ws2812FxApiRx$Type extends MessageType<Ws2812FxApiRx> {
    constructor() {
        super("Ws2812FxApiRx", [
            { no: 1, name: "ackConstructAndInit", kind: "message", oneof: "response", T: () => WS2812FxConstructAndInitRequest },
            { no: 2, name: "ackStart", kind: "message", oneof: "response", T: () => NoArgResponse },
            { no: 3, name: "ackStop", kind: "message", oneof: "response", T: () => NoArgResponse },
            { no: 4, name: "ackPause", kind: "message", oneof: "response", T: () => NoArgResponse },
            { no: 5, name: "ackResume", kind: "message", oneof: "response", T: () => NoArgResponse },
            { no: 6, name: "ackService", kind: "message", oneof: "response", T: () => NoArgResponse },
            { no: 7, name: "ackShow", kind: "message", oneof: "response", T: () => NoArgResponse },
            { no: 8, name: "ackStripOff", kind: "message", oneof: "response", T: () => NoArgResponse },
            { no: 9, name: "ackFadeOut", kind: "message", oneof: "response", T: () => NoArgResponse },
            { no: 10, name: "ackFadeOutToColor", kind: "message", oneof: "response", T: () => QromaColor },
            { no: 11, name: "ackSetMode", kind: "message", oneof: "response", T: () => SetModeRequest },
            { no: 12, name: "ackSetColor", kind: "message", oneof: "response", T: () => QromaColor },
            { no: 13, name: "ackSetSpeed", kind: "message", oneof: "response", T: () => SetSpeedRequest },
            { no: 14, name: "ackFill", kind: "message", oneof: "response", T: () => FillRequest },
            { no: 15, name: "ackSetPixelColor", kind: "message", oneof: "response", T: () => SetPixelColorRequest },
            { no: 16, name: "ackSetBrightness", kind: "message", oneof: "response", T: () => SetBrightnessRequest },
            { no: 17, name: "ackIncreaseBrightness", kind: "message", oneof: "response", T: () => IncreaseBrightnessRequest },
            { no: 18, name: "ackDecreaseBrightness", kind: "message", oneof: "response", T: () => DecreaseBrightnessRequest }
        ]);
    }
    create(value?: PartialMessage<Ws2812FxApiRx>): Ws2812FxApiRx {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Ws2812FxApiRx>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Ws2812FxApiRx): Ws2812FxApiRx {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* WS2812FxConstructAndInitRequest ackConstructAndInit */ 1:
                    message.response = {
                        oneofKind: "ackConstructAndInit",
                        ackConstructAndInit: WS2812FxConstructAndInitRequest.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackConstructAndInit)
                    };
                    break;
                case /* NoArgResponse ackStart */ 2:
                    message.response = {
                        oneofKind: "ackStart",
                        ackStart: NoArgResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackStart)
                    };
                    break;
                case /* NoArgResponse ackStop */ 3:
                    message.response = {
                        oneofKind: "ackStop",
                        ackStop: NoArgResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackStop)
                    };
                    break;
                case /* NoArgResponse ackPause */ 4:
                    message.response = {
                        oneofKind: "ackPause",
                        ackPause: NoArgResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackPause)
                    };
                    break;
                case /* NoArgResponse ackResume */ 5:
                    message.response = {
                        oneofKind: "ackResume",
                        ackResume: NoArgResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackResume)
                    };
                    break;
                case /* NoArgResponse ackService */ 6:
                    message.response = {
                        oneofKind: "ackService",
                        ackService: NoArgResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackService)
                    };
                    break;
                case /* NoArgResponse ackShow */ 7:
                    message.response = {
                        oneofKind: "ackShow",
                        ackShow: NoArgResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackShow)
                    };
                    break;
                case /* NoArgResponse ackStripOff */ 8:
                    message.response = {
                        oneofKind: "ackStripOff",
                        ackStripOff: NoArgResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackStripOff)
                    };
                    break;
                case /* NoArgResponse ackFadeOut */ 9:
                    message.response = {
                        oneofKind: "ackFadeOut",
                        ackFadeOut: NoArgResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackFadeOut)
                    };
                    break;
                case /* QromaColor ackFadeOutToColor */ 10:
                    message.response = {
                        oneofKind: "ackFadeOutToColor",
                        ackFadeOutToColor: QromaColor.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackFadeOutToColor)
                    };
                    break;
                case /* SetModeRequest ackSetMode */ 11:
                    message.response = {
                        oneofKind: "ackSetMode",
                        ackSetMode: SetModeRequest.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackSetMode)
                    };
                    break;
                case /* QromaColor ackSetColor */ 12:
                    message.response = {
                        oneofKind: "ackSetColor",
                        ackSetColor: QromaColor.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackSetColor)
                    };
                    break;
                case /* SetSpeedRequest ackSetSpeed */ 13:
                    message.response = {
                        oneofKind: "ackSetSpeed",
                        ackSetSpeed: SetSpeedRequest.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackSetSpeed)
                    };
                    break;
                case /* FillRequest ackFill */ 14:
                    message.response = {
                        oneofKind: "ackFill",
                        ackFill: FillRequest.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackFill)
                    };
                    break;
                case /* SetPixelColorRequest ackSetPixelColor */ 15:
                    message.response = {
                        oneofKind: "ackSetPixelColor",
                        ackSetPixelColor: SetPixelColorRequest.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackSetPixelColor)
                    };
                    break;
                case /* SetBrightnessRequest ackSetBrightness */ 16:
                    message.response = {
                        oneofKind: "ackSetBrightness",
                        ackSetBrightness: SetBrightnessRequest.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackSetBrightness)
                    };
                    break;
                case /* IncreaseBrightnessRequest ackIncreaseBrightness */ 17:
                    message.response = {
                        oneofKind: "ackIncreaseBrightness",
                        ackIncreaseBrightness: IncreaseBrightnessRequest.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackIncreaseBrightness)
                    };
                    break;
                case /* DecreaseBrightnessRequest ackDecreaseBrightness */ 18:
                    message.response = {
                        oneofKind: "ackDecreaseBrightness",
                        ackDecreaseBrightness: DecreaseBrightnessRequest.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).ackDecreaseBrightness)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Ws2812FxApiRx, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* WS2812FxConstructAndInitRequest ackConstructAndInit = 1; */
        if (message.response.oneofKind === "ackConstructAndInit")
            WS2812FxConstructAndInitRequest.internalBinaryWrite(message.response.ackConstructAndInit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* NoArgResponse ackStart = 2; */
        if (message.response.oneofKind === "ackStart")
            NoArgResponse.internalBinaryWrite(message.response.ackStart, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* NoArgResponse ackStop = 3; */
        if (message.response.oneofKind === "ackStop")
            NoArgResponse.internalBinaryWrite(message.response.ackStop, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* NoArgResponse ackPause = 4; */
        if (message.response.oneofKind === "ackPause")
            NoArgResponse.internalBinaryWrite(message.response.ackPause, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* NoArgResponse ackResume = 5; */
        if (message.response.oneofKind === "ackResume")
            NoArgResponse.internalBinaryWrite(message.response.ackResume, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* NoArgResponse ackService = 6; */
        if (message.response.oneofKind === "ackService")
            NoArgResponse.internalBinaryWrite(message.response.ackService, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* NoArgResponse ackShow = 7; */
        if (message.response.oneofKind === "ackShow")
            NoArgResponse.internalBinaryWrite(message.response.ackShow, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* NoArgResponse ackStripOff = 8; */
        if (message.response.oneofKind === "ackStripOff")
            NoArgResponse.internalBinaryWrite(message.response.ackStripOff, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* NoArgResponse ackFadeOut = 9; */
        if (message.response.oneofKind === "ackFadeOut")
            NoArgResponse.internalBinaryWrite(message.response.ackFadeOut, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* QromaColor ackFadeOutToColor = 10; */
        if (message.response.oneofKind === "ackFadeOutToColor")
            QromaColor.internalBinaryWrite(message.response.ackFadeOutToColor, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* SetModeRequest ackSetMode = 11; */
        if (message.response.oneofKind === "ackSetMode")
            SetModeRequest.internalBinaryWrite(message.response.ackSetMode, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* QromaColor ackSetColor = 12; */
        if (message.response.oneofKind === "ackSetColor")
            QromaColor.internalBinaryWrite(message.response.ackSetColor, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* SetSpeedRequest ackSetSpeed = 13; */
        if (message.response.oneofKind === "ackSetSpeed")
            SetSpeedRequest.internalBinaryWrite(message.response.ackSetSpeed, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* FillRequest ackFill = 14; */
        if (message.response.oneofKind === "ackFill")
            FillRequest.internalBinaryWrite(message.response.ackFill, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* SetPixelColorRequest ackSetPixelColor = 15; */
        if (message.response.oneofKind === "ackSetPixelColor")
            SetPixelColorRequest.internalBinaryWrite(message.response.ackSetPixelColor, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* SetBrightnessRequest ackSetBrightness = 16; */
        if (message.response.oneofKind === "ackSetBrightness")
            SetBrightnessRequest.internalBinaryWrite(message.response.ackSetBrightness, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* IncreaseBrightnessRequest ackIncreaseBrightness = 17; */
        if (message.response.oneofKind === "ackIncreaseBrightness")
            IncreaseBrightnessRequest.internalBinaryWrite(message.response.ackIncreaseBrightness, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* DecreaseBrightnessRequest ackDecreaseBrightness = 18; */
        if (message.response.oneofKind === "ackDecreaseBrightness")
            DecreaseBrightnessRequest.internalBinaryWrite(message.response.ackDecreaseBrightness, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Ws2812FxApiRx
 */
export const Ws2812FxApiRx = new Ws2812FxApiRx$Type();
