// @generated by protobuf-ts 2.9.4 with parameter use_proto_field_name,generate_dependencies
// @generated from protobuf file "qroma-line-target-commands.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { QromaColor } from "./qroma-api4-ws2812fx";
/**
 * @generated from protobuf message ActivateLineTargetRequest
 */
export interface ActivateLineTargetRequest {
    /**
     * @generated from protobuf field: QromaColor backgroundColor = 1;
     */
    backgroundColor?: QromaColor;
    /**
     * @generated from protobuf field: QromaColor targetColor = 2;
     */
    targetColor?: QromaColor;
    /**
     * @generated from protobuf field: uint32 targetStartIndex = 3;
     */
    targetStartIndex: number;
    /**
     * @generated from protobuf field: uint32 targetEndIndex = 4;
     */
    targetEndIndex: number;
}
/**
 * @generated from protobuf message QromaLineTargetCommand
 */
export interface QromaLineTargetCommand {
    /**
     * @generated from protobuf oneof: command
     */
    command: {
        oneofKind: "activateLineTarget";
        /**
         * @generated from protobuf field: ActivateLineTargetRequest activateLineTarget = 1;
         */
        activateLineTarget: ActivateLineTargetRequest;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ActivateLineTargetRequest$Type extends MessageType<ActivateLineTargetRequest> {
    constructor() {
        super("ActivateLineTargetRequest", [
            { no: 1, name: "backgroundColor", kind: "message", T: () => QromaColor },
            { no: 2, name: "targetColor", kind: "message", T: () => QromaColor },
            { no: 3, name: "targetStartIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "targetEndIndex", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ActivateLineTargetRequest>): ActivateLineTargetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.targetStartIndex = 0;
        message.targetEndIndex = 0;
        if (value !== undefined)
            reflectionMergePartial<ActivateLineTargetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivateLineTargetRequest): ActivateLineTargetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* QromaColor backgroundColor */ 1:
                    message.backgroundColor = QromaColor.internalBinaryRead(reader, reader.uint32(), options, message.backgroundColor);
                    break;
                case /* QromaColor targetColor */ 2:
                    message.targetColor = QromaColor.internalBinaryRead(reader, reader.uint32(), options, message.targetColor);
                    break;
                case /* uint32 targetStartIndex */ 3:
                    message.targetStartIndex = reader.uint32();
                    break;
                case /* uint32 targetEndIndex */ 4:
                    message.targetEndIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivateLineTargetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* QromaColor backgroundColor = 1; */
        if (message.backgroundColor)
            QromaColor.internalBinaryWrite(message.backgroundColor, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* QromaColor targetColor = 2; */
        if (message.targetColor)
            QromaColor.internalBinaryWrite(message.targetColor, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 targetStartIndex = 3; */
        if (message.targetStartIndex !== 0)
            writer.tag(3, WireType.Varint).uint32(message.targetStartIndex);
        /* uint32 targetEndIndex = 4; */
        if (message.targetEndIndex !== 0)
            writer.tag(4, WireType.Varint).uint32(message.targetEndIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ActivateLineTargetRequest
 */
export const ActivateLineTargetRequest = new ActivateLineTargetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QromaLineTargetCommand$Type extends MessageType<QromaLineTargetCommand> {
    constructor() {
        super("QromaLineTargetCommand", [
            { no: 1, name: "activateLineTarget", kind: "message", oneof: "command", T: () => ActivateLineTargetRequest }
        ]);
    }
    create(value?: PartialMessage<QromaLineTargetCommand>): QromaLineTargetCommand {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.command = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<QromaLineTargetCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QromaLineTargetCommand): QromaLineTargetCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ActivateLineTargetRequest activateLineTarget */ 1:
                    message.command = {
                        oneofKind: "activateLineTarget",
                        activateLineTarget: ActivateLineTargetRequest.internalBinaryRead(reader, reader.uint32(), options, (message.command as any).activateLineTarget)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QromaLineTargetCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ActivateLineTargetRequest activateLineTarget = 1; */
        if (message.command.oneofKind === "activateLineTarget")
            ActivateLineTargetRequest.internalBinaryWrite(message.command.activateLineTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message QromaLineTargetCommand
 */
export const QromaLineTargetCommand = new QromaLineTargetCommand$Type();
